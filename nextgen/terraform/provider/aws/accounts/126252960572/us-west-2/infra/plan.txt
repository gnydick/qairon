module.vpcs["vpc1"].module.vpc.aws_vpc.this: Refreshing state... [id=vpc-0fa06b2e41751a7be]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_internet_gateway.igw[0]: Refreshing state... [id=igw-0e2d7fa15e28d170d]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_role.eks_service_role: Refreshing state... [id=infra1.eksServiceRole]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[1]: Refreshing state... [id=subnet-0ab5637d22c77cb95]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[0]: Refreshing state... [id=subnet-005ee48bc9a39e138]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[3]: Refreshing state... [id=subnet-0b648a9264266c545]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[2]: Refreshing state... [id=subnet-093c1da07a9e5536c]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.public_rt[0]: Refreshing state... [id=rtb-068bb910baf539900]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group.cluster: Refreshing state... [id=sg-0a972922866c83955]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[1]: Refreshing state... [id=subnet-0472b57d9ecd46678]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group.nodes: Refreshing state... [id=sg-03bb96fc05aabae34]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[2]: Refreshing state... [id=subnet-0057a9ba984a54d4f]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[3]: Refreshing state... [id=subnet-0c5528a049367389c]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[0]: Refreshing state... [id=subnet-0a2df1d4db0a896e0]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[1]: Refreshing state... [id=eipalloc-0a88bc930015a7cab]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[3]: Refreshing state... [id=eipalloc-0092549ed6976e67d]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[2]: Refreshing state... [id=eipalloc-07273ccbd2c04e149]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[0]: Refreshing state... [id=eipalloc-098c509c7d8f69a23]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[1]: Refreshing state... [id=rtb-0fbac48d19fae3dda]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[3]: Refreshing state... [id=rtb-0f92eead64bd6208d]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[2]: Refreshing state... [id=rtb-022d77c8a5bfae0b8]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[0]: Refreshing state... [id=rtb-0e818fd33b8d88720]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.workers_to_workers_ingress: Refreshing state... [id=sgrule-711018267]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.worker_https_cluster_ingress: Refreshing state... [id=sgrule-1699283566]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.cluster_https_to_worker_egress: Refreshing state... [id=sgrule-165928645]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.workers_to_cluster_kubelet_egress: Refreshing state... [id=sgrule-4201539424]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.worker_https_to_cluster_ingress: Refreshing state... [id=sgrule-2847790240]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.cluster_to_workers_kubelet_ingress: Refreshing state... [id=sgrule-3272005808]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.public_internet_gateway[0]: Refreshing state... [id=r-rtb-068bb910baf5399001080289494]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[3]: Refreshing state... [id=rtbassoc-0b6183440b1e20f4d]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[2]: Refreshing state... [id=rtbassoc-065181217e076afb7]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-07039c1da34ab4b50]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-021bcb9f88a60b89d]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[3]: Refreshing state... [id=nat-022d1d84f8e16cd4b]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[1]: Refreshing state... [id=nat-060cfb023ab6e312f]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[2]: Refreshing state... [id=nat-03e15248577782e82]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[0]: Refreshing state... [id=nat-0a35eda42a66fe70a]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-0d503a5015945a44f]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-0d21a39361b5dd138]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[2]: Refreshing state... [id=rtbassoc-02cdb56b692275301]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[3]: Refreshing state... [id=rtbassoc-07ae3bd1140052d46]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[3]: Refreshing state... [id=r-rtb-0f92eead64bd6208d1080289494]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[2]: Refreshing state... [id=r-rtb-022d77c8a5bfae0b81080289494]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[0]: Refreshing state... [id=r-rtb-0e818fd33b8d887201080289494]
module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[1]: Refreshing state... [id=r-rtb-0fbac48d19fae3dda1080289494]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
  - destroy
-/+ destroy and then create replacement
 <= read (data resources)

Terraform will perform the following actions:

  # module.vpcs["vpc1"].module.vpc.aws_vpc.this will be destroyed
  - resource "aws_vpc" "this" {
      - arn                              = "arn:aws:ec2:us-west-2:126252960572:vpc/vpc-0fa06b2e41751a7be" -> null
      - assign_generated_ipv6_cidr_block = false -> null
      - cidr_block                       = "10.0.0.0/16" -> null
      - default_network_acl_id           = "acl-08c416a5721b58432" -> null
      - default_route_table_id           = "rtb-0cedb506ea4d69612" -> null
      - default_security_group_id        = "sg-036e311d2ef9a8d63" -> null
      - dhcp_options_id                  = "dopt-23a8855b" -> null
      - enable_classiclink               = false -> null
      - enable_classiclink_dns_support   = false -> null
      - enable_dns_hostnames             = true -> null
      - enable_dns_support               = true -> null
      - id                               = "vpc-0fa06b2e41751a7be" -> null
      - instance_tenancy                 = "default" -> null
      - main_route_table_id              = "rtb-0cedb506ea4d69612" -> null
      - owner_id                         = "126252960572" -> null
      - tags                             = {
          - "Name" = "withme-services-infra-automation-default-vpc1"
        } -> null
      - tags_all                         = {
          - "Config"      = "default"
          - "Dept"        = "services"
          - "Environment" = "infra"
          - "GeneratedBy" = "terraform"
          - "Name"        = "withme-services-infra-automation-default-vpc1"
          - "Org"         = "withme"
          - "Role"        = "automation"
        } -> null
    }

  # module.vpcs["vpc1"].module.vpc.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "10.0.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "withme-services-infra-us-west-2-automation-default-vpc1"
        }
      + tags_all                         = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Name"        = "withme-services-infra-us-west-2-automation-default-vpc1"
          + "Org"         = "withme"
          + "Role"        = "automation"
        }
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.data.aws_iam_policy.AmazonEKSClusterPolicy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy" "AmazonEKSClusterPolicy"  {
      ~ description = "This policy provides Kubernetes the permissions it requires to manage resources on your behalf. Kubernetes requires Ec2:CreateTags permissions to place identifying information on EC2 resources including but not limited to Instances, Security Groups, and Elastic Network Interfaces. " -> (known after apply)
      ~ id          = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy" -> (known after apply)
      ~ name        = "AmazonEKSClusterPolicy" -> (known after apply)
      ~ path        = "/" -> (known after apply)
      ~ policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "autoscaling:DescribeAutoScalingGroups",
                          - "autoscaling:UpdateAutoScalingGroup",
                          - "ec2:AttachVolume",
                          - "ec2:AuthorizeSecurityGroupIngress",
                          - "ec2:CreateRoute",
                          - "ec2:CreateSecurityGroup",
                          - "ec2:CreateTags",
                          - "ec2:CreateVolume",
                          - "ec2:DeleteRoute",
                          - "ec2:DeleteSecurityGroup",
                          - "ec2:DeleteVolume",
                          - "ec2:DescribeInstances",
                          - "ec2:DescribeRouteTables",
                          - "ec2:DescribeSecurityGroups",
                          - "ec2:DescribeSubnets",
                          - "ec2:DescribeVolumes",
                          - "ec2:DescribeVolumesModifications",
                          - "ec2:DescribeVpcs",
                          - "ec2:DescribeDhcpOptions",
                          - "ec2:DescribeNetworkInterfaces",
                          - "ec2:DetachVolume",
                          - "ec2:ModifyInstanceAttribute",
                          - "ec2:ModifyVolume",
                          - "ec2:RevokeSecurityGroupIngress",
                          - "elasticloadbalancing:AddTags",
                          - "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                          - "elasticloadbalancing:AttachLoadBalancerToSubnets",
                          - "elasticloadbalancing:ConfigureHealthCheck",
                          - "elasticloadbalancing:CreateListener",
                          - "elasticloadbalancing:CreateLoadBalancer",
                          - "elasticloadbalancing:CreateLoadBalancerListeners",
                          - "elasticloadbalancing:CreateLoadBalancerPolicy",
                          - "elasticloadbalancing:CreateTargetGroup",
                          - "elasticloadbalancing:DeleteListener",
                          - "elasticloadbalancing:DeleteLoadBalancer",
                          - "elasticloadbalancing:DeleteLoadBalancerListeners",
                          - "elasticloadbalancing:DeleteTargetGroup",
                          - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                          - "elasticloadbalancing:DeregisterTargets",
                          - "elasticloadbalancing:DescribeListeners",
                          - "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          - "elasticloadbalancing:DescribeLoadBalancerPolicies",
                          - "elasticloadbalancing:DescribeLoadBalancers",
                          - "elasticloadbalancing:DescribeTargetGroupAttributes",
                          - "elasticloadbalancing:DescribeTargetGroups",
                          - "elasticloadbalancing:DescribeTargetHealth",
                          - "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                          - "elasticloadbalancing:ModifyListener",
                          - "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          - "elasticloadbalancing:ModifyTargetGroup",
                          - "elasticloadbalancing:ModifyTargetGroupAttributes",
                          - "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                          - "elasticloadbalancing:RegisterTargets",
                          - "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                          - "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
                          - "kms:DescribeKey",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                  - {
                      - Action    = "iam:CreateServiceLinkedRole"
                      - Condition = {
                          - StringLike = {
                              - iam:AWSServiceName = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      - Effect    = "Allow"
                      - Resource  = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ policy_id   = "ANPAIBTLDQMIC6UOIGFWA" -> (known after apply)
      ~ tags        = {} -> (known after apply)
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.data.aws_iam_policy.AmazonEKSServicePolicy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy" "AmazonEKSServicePolicy"  {
      ~ description = "This policy allows Amazon Elastic Container Service for Kubernetes to create and manage the necessary resources to operate EKS Clusters." -> (known after apply)
      ~ id          = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy" -> (known after apply)
      ~ name        = "AmazonEKSServicePolicy" -> (known after apply)
      ~ path        = "/" -> (known after apply)
      ~ policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "ec2:CreateNetworkInterface",
                          - "ec2:CreateNetworkInterfacePermission",
                          - "ec2:DeleteNetworkInterface",
                          - "ec2:DescribeInstances",
                          - "ec2:DescribeNetworkInterfaces",
                          - "ec2:DetachNetworkInterface",
                          - "ec2:DescribeSecurityGroups",
                          - "ec2:DescribeSubnets",
                          - "ec2:DescribeVpcs",
                          - "ec2:ModifyNetworkInterfaceAttribute",
                          - "iam:ListAttachedRolePolicies",
                          - "eks:UpdateClusterVersion",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                  - {
                      - Action   = [
                          - "ec2:CreateTags",
                          - "ec2:DeleteTags",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:ec2:*:*:vpc/*",
                          - "arn:aws:ec2:*:*:subnet/*",
                        ]
                    },
                  - {
                      - Action   = "route53:AssociateVPCWithHostedZone"
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                  - {
                      - Action   = "logs:CreateLogGroup"
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                  - {
                      - Action   = [
                          - "logs:CreateLogStream",
                          - "logs:DescribeLogStreams",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
                    },
                  - {
                      - Action   = "logs:PutLogEvents"
                      - Effect   = "Allow"
                      - Resource = "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
                    },
                  - {
                      - Action    = "iam:CreateServiceLinkedRole"
                      - Condition = {
                          - StringLike = {
                              - iam:AWSServiceName = "eks.amazonaws.com"
                            }
                        }
                      - Effect    = "Allow"
                      - Resource  = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ policy_id   = "ANPAJFCNXU6HPGCIVXYDI" -> (known after apply)
      ~ tags        = {} -> (known after apply)
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.data.aws_iam_policy.AmazonEKSVPCResourceController will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy" "AmazonEKSVPCResourceController"  {
      ~ description = "Policy used by VPC Resource Controller to manage ENI and IPs for worker nodes." -> (known after apply)
      ~ id          = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController" -> (known after apply)
      ~ name        = "AmazonEKSVPCResourceController" -> (known after apply)
      ~ path        = "/" -> (known after apply)
      ~ policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "ec2:CreateNetworkInterfacePermission"
                      - Condition = {
                          - ForAnyValue:StringEquals = {
                              - ec2:ResourceTag/eks:eni:owner = "eks-vpc-resource-controller"
                            }
                        }
                      - Effect    = "Allow"
                      - Resource  = "*"
                    },
                  - {
                      - Action   = [
                          - "ec2:CreateNetworkInterface",
                          - "ec2:DetachNetworkInterface",
                          - "ec2:ModifyNetworkInterfaceAttribute",
                          - "ec2:DeleteNetworkInterface",
                          - "ec2:AttachNetworkInterface",
                          - "ec2:UnassignPrivateIpAddresses",
                          - "ec2:AssignPrivateIpAddresses",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ policy_id   = "ANPAZKAPJZG4PBOFT2NNA" -> (known after apply)
      ~ tags        = {} -> (known after apply)
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.data.aws_iam_policy_document.example_assume_role_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "example_assume_role_policy"  {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions = [
              + "sts:AssumeRoleWithWebIdentity",
            ]
          + effect  = "Allow"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "system:serviceaccount:kube-system:aws-node",
                ]
              + variable = (known after apply)
            }

          + principals {
              + identifiers = [
                  + (known after apply),
                ]
              + type        = "Federated"
            }
        }
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.data.tls_certificate.cluster will be read during apply
  # (config refers to values not yet known)
 <= data "tls_certificate" "cluster"  {
      + certificates = (known after apply)
      + id           = (known after apply)
      + url          = (known after apply)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_eks_cluster.cluster will be created
  + resource "aws_eks_cluster" "cluster" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "infra1"
      + platform_version      = (known after apply)
      + role_arn              = "arn:aws:iam::126252960572:role/infra1.eksServiceRole"
      + status                = (known after apply)
      + tags                  = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Region"      = "us-west-2"
          + "Role"        = "automation"
        }
      + tags_all              = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Region"      = "us-west-2"
          + "Role"        = "automation"
        }
      + version               = "1.19"

      + kubernetes_network_config {
          + service_ipv4_cidr = (known after apply)
        }

      + timeouts {
          + create = "90m"
          + delete = "90m"
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = true
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_openid_connect_provider.cluster will be created
  + resource "aws_iam_openid_connect_provider" "cluster" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Role"        = "automation"
        }
      + thumbprint_list = (known after apply)
      + url             = (known after apply)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_role.example will be created
  + resource "aws_iam_role" "example" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "example"
      + path                  = "/"
      + tags_all              = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Role"        = "automation"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "infra1.eksServiceRole"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "infra1.eksServiceRole"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_iam_role_policy_attachment.cluster_AmazonEKSVPCResourceControllerPolicy will be created
  + resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSVPCResourceControllerPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "infra1.eksServiceRole"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group.cluster must be replaced
-/+ resource "aws_security_group" "cluster" {
      ~ arn                    = "arn:aws:ec2:us-west-2:126252960572:security-group/sg-0a972922866c83955" -> (known after apply)
      ~ egress                 = [] -> (known after apply)
      ~ id                     = "sg-0a972922866c83955" -> (known after apply)
      ~ ingress                = [
          - {
              - cidr_blocks      = []
              - description      = "Allow pods to communicate with the cluster API Server."
              - from_port        = 443
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = [
                  - "sg-03bb96fc05aabae34",
                ]
              - self             = false
              - to_port          = 443
            },
        ] -> (known after apply)
      ~ name                   = "infra120210520044402189900000001" -> (known after apply)
      ~ owner_id               = "126252960572" -> (known after apply)
        tags                   = {
            "Name" = "infra1-eks_cluster_sg"
        }
      ~ vpc_id                 = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group.nodes must be replaced
-/+ resource "aws_security_group" "nodes" {
      ~ arn                    = "arn:aws:ec2:us-west-2:126252960572:security-group/sg-03bb96fc05aabae34" -> (known after apply)
      ~ egress                 = [
          - {
              - cidr_blocks      = []
              - description      = "Allow the cluster control plane to communicate with pods running extension API servers on port 443."
              - from_port        = 443
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = [
                  - "sg-0a972922866c83955",
                ]
              - self             = false
              - to_port          = 443
            },
          - {
              - cidr_blocks      = []
              - description      = "Allow the cluster control plane to communicate with worker Kubelet and pods."
              - from_port        = 1025
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = [
                  - "sg-0a972922866c83955",
                ]
              - self             = false
              - to_port          = 65535
            },
        ] -> (known after apply)
      ~ id                     = "sg-03bb96fc05aabae34" -> (known after apply)
      ~ ingress                = [
          - {
              - cidr_blocks      = []
              - description      = "Allow nodes to communicate with each other."
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = true
              - to_port          = 0
            },
          - {
              - cidr_blocks      = []
              - description      = "Allow pods running extension API servers on port 443 to receive communication from cluster control plane."
              - from_port        = 443
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = [
                  - "sg-0a972922866c83955",
                ]
              - self             = false
              - to_port          = 443
            },
          - {
              - cidr_blocks      = []
              - description      = "Allow worker Kubelets and pods to receive communication from the cluster control plane."
              - from_port        = 1025
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = [
                  - "sg-0a972922866c83955",
                ]
              - self             = false
              - to_port          = 65535
            },
        ] -> (known after apply)
      ~ name                   = "infra120210520044402191200000002" -> (known after apply)
      ~ owner_id               = "126252960572" -> (known after apply)
        tags                   = {
            "Name" = "infra1-eks_cluster_nodes_sg"
        }
      ~ vpc_id                 = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.cluster_egress_internet will be created
  + resource "aws_security_group_rule" "cluster_egress_internet" {
      + cidr_blocks              = []
      + description              = "Allow cluster egress access to the Internet."
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.cluster_https_to_worker_egress must be replaced
-/+ resource "aws_security_group_rule" "cluster_https_to_worker_egress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-165928645" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-0a972922866c83955" -> (known after apply) # forces replacement
        # (6 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.cluster_to_workers_kubelet_ingress must be replaced
-/+ resource "aws_security_group_rule" "cluster_to_workers_kubelet_ingress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-3272005808" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-0a972922866c83955" -> (known after apply) # forces replacement
        # (6 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.worker_https_cluster_ingress must be replaced
-/+ resource "aws_security_group_rule" "worker_https_cluster_ingress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-1699283566" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-0a972922866c83955" -> (known after apply) # forces replacement
        # (6 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.worker_https_to_cluster_ingress must be replaced
-/+ resource "aws_security_group_rule" "worker_https_to_cluster_ingress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-2847790240" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-0a972922866c83955" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
        # (6 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.workers_to_cluster_kubelet_egress must be replaced
-/+ resource "aws_security_group_rule" "workers_to_cluster_kubelet_egress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-4201539424" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-0a972922866c83955" -> (known after apply) # forces replacement
        # (6 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.cluster.aws_security_group_rule.workers_to_workers_ingress must be replaced
-/+ resource "aws_security_group_rule" "workers_to_workers_ingress" {
      - cidr_blocks              = [] -> null
      ~ id                       = "sgrule-711018267" -> (known after apply)
      - ipv6_cidr_blocks         = [] -> null
      - prefix_list_ids          = [] -> null
      ~ security_group_id        = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ source_security_group_id = "sg-03bb96fc05aabae34" -> (known after apply) # forces replacement
      ~ to_port                  = 0 -> 65535
        # (5 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[0] will be updated in-place
  ~ resource "aws_eip" "nat" {
        id                   = "eipalloc-098c509c7d8f69a23"
      ~ tags                 = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
        # (10 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[1] will be updated in-place
  ~ resource "aws_eip" "nat" {
        id                   = "eipalloc-0a88bc930015a7cab"
      ~ tags                 = {
          + "Az"   = "us-west-2b"
          ~ "Name" = "infra-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2b"
          ~ "Name"        = "infra-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
            # (6 unchanged elements hidden)
        }
        # (10 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[2] will be updated in-place
  ~ resource "aws_eip" "nat" {
        id                   = "eipalloc-07273ccbd2c04e149"
      ~ tags                 = {
          + "Az"   = "us-west-2c"
          ~ "Name" = "infra-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2c"
          ~ "Name"        = "infra-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
            # (6 unchanged elements hidden)
        }
        # (10 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_eip.nat[3] will be updated in-place
  ~ resource "aws_eip" "nat" {
        id                   = "eipalloc-0092549ed6976e67d"
      ~ tags                 = {
          + "Az"   = "us-west-2d"
          ~ "Name" = "infra-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2d"
          ~ "Name"        = "infra-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
            # (6 unchanged elements hidden)
        }
        # (10 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_internet_gateway.igw[0] will be updated in-place
  ~ resource "aws_internet_gateway" "igw" {
        id       = "igw-0e2d7fa15e28d170d"
      ~ tags     = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id   = "vpc-0fa06b2e41751a7be" -> (known after apply)
        # (2 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[0] must be replaced
-/+ resource "aws_nat_gateway" "nat_gtw" {
      ~ id                   = "nat-0a35eda42a66fe70a" -> (known after apply)
      ~ network_interface_id = "eni-0fa6146310be91f6f" -> (known after apply)
      ~ private_ip           = "10.0.1.61" -> (known after apply)
      ~ public_ip            = "52.43.198.61" -> (known after apply)
      ~ subnet_id            = "subnet-005ee48bc9a39e138" -> (known after apply) # forces replacement
      ~ tags                 = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[1] must be replaced
-/+ resource "aws_nat_gateway" "nat_gtw" {
      ~ id                   = "nat-060cfb023ab6e312f" -> (known after apply)
      ~ network_interface_id = "eni-0796567c33ab007af" -> (known after apply)
      ~ private_ip           = "10.0.2.89" -> (known after apply)
      ~ public_ip            = "35.83.217.229" -> (known after apply)
      ~ subnet_id            = "subnet-0ab5637d22c77cb95" -> (known after apply) # forces replacement
      ~ tags                 = {
          + "Az"   = "us-west-2b"
          ~ "Name" = "infra-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2b"
          ~ "Name"        = "infra-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
            # (6 unchanged elements hidden)
        }
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[2] must be replaced
-/+ resource "aws_nat_gateway" "nat_gtw" {
      ~ id                   = "nat-03e15248577782e82" -> (known after apply)
      ~ network_interface_id = "eni-03a08085aa229a1bf" -> (known after apply)
      ~ private_ip           = "10.0.3.238" -> (known after apply)
      ~ public_ip            = "52.27.229.126" -> (known after apply)
      ~ subnet_id            = "subnet-093c1da07a9e5536c" -> (known after apply) # forces replacement
      ~ tags                 = {
          + "Az"   = "us-west-2c"
          ~ "Name" = "infra-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2c"
          ~ "Name"        = "infra-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
            # (6 unchanged elements hidden)
        }
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_nat_gateway.nat_gtw[3] must be replaced
-/+ resource "aws_nat_gateway" "nat_gtw" {
      ~ id                   = "nat-022d1d84f8e16cd4b" -> (known after apply)
      ~ network_interface_id = "eni-0886c889b21127484" -> (known after apply)
      ~ private_ip           = "10.0.4.211" -> (known after apply)
      ~ public_ip            = "35.83.203.126" -> (known after apply)
      ~ subnet_id            = "subnet-0b648a9264266c545" -> (known after apply) # forces replacement
      ~ tags                 = {
          + "Az"   = "us-west-2d"
          ~ "Name" = "infra-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
        }
      ~ tags_all             = {
          + "Az"          = "us-west-2d"
          ~ "Name"        = "infra-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
            # (6 unchanged elements hidden)
        }
        # (1 unchanged attribute hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[0] must be replaced
-/+ resource "aws_route" "private_nat_gateway" {
      ~ id                     = "r-rtb-0e818fd33b8d887201080289494" -> (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      ~ nat_gateway_id         = "nat-0a35eda42a66fe70a" -> (known after apply)
      + network_interface_id   = (known after apply)
      ~ origin                 = "CreateRoute" -> (known after apply)
      ~ route_table_id         = "rtb-0e818fd33b8d88720" -> (known after apply) # forces replacement
      ~ state                  = "active" -> (known after apply)
        # (1 unchanged attribute hidden)

        # (1 unchanged block hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[1] must be replaced
-/+ resource "aws_route" "private_nat_gateway" {
      ~ id                     = "r-rtb-0fbac48d19fae3dda1080289494" -> (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      ~ nat_gateway_id         = "nat-060cfb023ab6e312f" -> (known after apply)
      + network_interface_id   = (known after apply)
      ~ origin                 = "CreateRoute" -> (known after apply)
      ~ route_table_id         = "rtb-0fbac48d19fae3dda" -> (known after apply) # forces replacement
      ~ state                  = "active" -> (known after apply)
        # (1 unchanged attribute hidden)

        # (1 unchanged block hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[2] must be replaced
-/+ resource "aws_route" "private_nat_gateway" {
      ~ id                     = "r-rtb-022d77c8a5bfae0b81080289494" -> (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      ~ nat_gateway_id         = "nat-03e15248577782e82" -> (known after apply)
      + network_interface_id   = (known after apply)
      ~ origin                 = "CreateRoute" -> (known after apply)
      ~ route_table_id         = "rtb-022d77c8a5bfae0b8" -> (known after apply) # forces replacement
      ~ state                  = "active" -> (known after apply)
        # (1 unchanged attribute hidden)

        # (1 unchanged block hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.private_nat_gateway[3] must be replaced
-/+ resource "aws_route" "private_nat_gateway" {
      ~ id                     = "r-rtb-0f92eead64bd6208d1080289494" -> (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      ~ nat_gateway_id         = "nat-022d1d84f8e16cd4b" -> (known after apply)
      + network_interface_id   = (known after apply)
      ~ origin                 = "CreateRoute" -> (known after apply)
      ~ route_table_id         = "rtb-0f92eead64bd6208d" -> (known after apply) # forces replacement
      ~ state                  = "active" -> (known after apply)
        # (1 unchanged attribute hidden)

        # (1 unchanged block hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route.public_internet_gateway[0] must be replaced
-/+ resource "aws_route" "public_internet_gateway" {
      ~ id                     = "r-rtb-068bb910baf5399001080289494" -> (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      ~ origin                 = "CreateRoute" -> (known after apply)
      ~ route_table_id         = "rtb-068bb910baf539900" -> (known after apply) # forces replacement
      ~ state                  = "active" -> (known after apply)
        # (2 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[0] must be replaced
-/+ resource "aws_route_table" "private_rt" {
      ~ arn              = "arn:aws:ec2:us-west-2:126252960572:route-table/rtb-0e818fd33b8d88720" -> (known after apply)
      ~ id               = "rtb-0e818fd33b8d88720" -> (known after apply)
      ~ owner_id         = "126252960572" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = ""
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = "nat-0a35eda42a66fe70a"
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> (known after apply)
      ~ tags             = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-private-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all         = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-private-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id           = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[1] must be replaced
-/+ resource "aws_route_table" "private_rt" {
      ~ arn              = "arn:aws:ec2:us-west-2:126252960572:route-table/rtb-0fbac48d19fae3dda" -> (known after apply)
      ~ id               = "rtb-0fbac48d19fae3dda" -> (known after apply)
      ~ owner_id         = "126252960572" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = ""
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = "nat-060cfb023ab6e312f"
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> (known after apply)
      ~ tags             = {
          + "Az"   = "us-west-2b"
          ~ "Name" = "infra-private-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
        }
      ~ tags_all         = {
          + "Az"          = "us-west-2b"
          ~ "Name"        = "infra-private-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id           = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[2] must be replaced
-/+ resource "aws_route_table" "private_rt" {
      ~ arn              = "arn:aws:ec2:us-west-2:126252960572:route-table/rtb-022d77c8a5bfae0b8" -> (known after apply)
      ~ id               = "rtb-022d77c8a5bfae0b8" -> (known after apply)
      ~ owner_id         = "126252960572" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = ""
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = "nat-03e15248577782e82"
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> (known after apply)
      ~ tags             = {
          + "Az"   = "us-west-2c"
          ~ "Name" = "infra-private-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
        }
      ~ tags_all         = {
          + "Az"          = "us-west-2c"
          ~ "Name"        = "infra-private-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id           = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.private_rt[3] must be replaced
-/+ resource "aws_route_table" "private_rt" {
      ~ arn              = "arn:aws:ec2:us-west-2:126252960572:route-table/rtb-0f92eead64bd6208d" -> (known after apply)
      ~ id               = "rtb-0f92eead64bd6208d" -> (known after apply)
      ~ owner_id         = "126252960572" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = ""
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = "nat-022d1d84f8e16cd4b"
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> (known after apply)
      ~ tags             = {
          + "Az"   = "us-west-2d"
          ~ "Name" = "infra-private-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
        }
      ~ tags_all         = {
          + "Az"          = "us-west-2d"
          ~ "Name"        = "infra-private-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id           = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table.public_rt[0] must be replaced
-/+ resource "aws_route_table" "public_rt" {
      ~ arn              = "arn:aws:ec2:us-west-2:126252960572:route-table/rtb-068bb910baf539900" -> (known after apply)
      ~ id               = "rtb-068bb910baf539900" -> (known after apply)
      ~ owner_id         = "126252960572" -> (known after apply)
      ~ propagating_vgws = [] -> (known after apply)
      ~ route            = [
          - {
              - carrier_gateway_id         = ""
              - cidr_block                 = "0.0.0.0/0"
              - destination_prefix_list_id = ""
              - egress_only_gateway_id     = ""
              - gateway_id                 = "igw-0e2d7fa15e28d170d"
              - instance_id                = ""
              - ipv6_cidr_block            = ""
              - local_gateway_id           = ""
              - nat_gateway_id             = ""
              - network_interface_id       = ""
              - transit_gateway_id         = ""
              - vpc_endpoint_id            = ""
              - vpc_peering_connection_id  = ""
            },
        ] -> (known after apply)
      ~ tags             = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-public" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all         = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-public" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id           = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[0] must be replaced
-/+ resource "aws_route_table_association" "private" {
      ~ id             = "rtbassoc-0d21a39361b5dd138" -> (known after apply)
      ~ route_table_id = "rtb-0e818fd33b8d88720" -> (known after apply)
      ~ subnet_id      = "subnet-0a2df1d4db0a896e0" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[1] must be replaced
-/+ resource "aws_route_table_association" "private" {
      ~ id             = "rtbassoc-0d503a5015945a44f" -> (known after apply)
      ~ route_table_id = "rtb-0fbac48d19fae3dda" -> (known after apply)
      ~ subnet_id      = "subnet-0472b57d9ecd46678" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[2] must be replaced
-/+ resource "aws_route_table_association" "private" {
      ~ id             = "rtbassoc-02cdb56b692275301" -> (known after apply)
      ~ route_table_id = "rtb-022d77c8a5bfae0b8" -> (known after apply)
      ~ subnet_id      = "subnet-0057a9ba984a54d4f" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.private[3] must be replaced
-/+ resource "aws_route_table_association" "private" {
      ~ id             = "rtbassoc-07ae3bd1140052d46" -> (known after apply)
      ~ route_table_id = "rtb-0f92eead64bd6208d" -> (known after apply)
      ~ subnet_id      = "subnet-0c5528a049367389c" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[0] must be replaced
-/+ resource "aws_route_table_association" "public" {
      ~ id             = "rtbassoc-07039c1da34ab4b50" -> (known after apply)
      ~ route_table_id = "rtb-068bb910baf539900" -> (known after apply)
      ~ subnet_id      = "subnet-005ee48bc9a39e138" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[1] must be replaced
-/+ resource "aws_route_table_association" "public" {
      ~ id             = "rtbassoc-021bcb9f88a60b89d" -> (known after apply)
      ~ route_table_id = "rtb-068bb910baf539900" -> (known after apply)
      ~ subnet_id      = "subnet-0ab5637d22c77cb95" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[2] must be replaced
-/+ resource "aws_route_table_association" "public" {
      ~ id             = "rtbassoc-065181217e076afb7" -> (known after apply)
      ~ route_table_id = "rtb-068bb910baf539900" -> (known after apply)
      ~ subnet_id      = "subnet-093c1da07a9e5536c" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_route_table_association.public[3] must be replaced
-/+ resource "aws_route_table_association" "public" {
      ~ id             = "rtbassoc-0b6183440b1e20f4d" -> (known after apply)
      ~ route_table_id = "rtb-068bb910baf539900" -> (known after apply)
      ~ subnet_id      = "subnet-0b648a9264266c545" -> (known after apply) # forces replacement
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[0] must be replaced
-/+ resource "aws_subnet" "private" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0a2df1d4db0a896e0" -> (known after apply)
      ~ availability_zone_id            = "usw2-az1" -> (known after apply)
      ~ id                              = "subnet-0a2df1d4db0a896e0" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-private-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-private-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[1] must be replaced
-/+ resource "aws_subnet" "private" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0472b57d9ecd46678" -> (known after apply)
      ~ availability_zone_id            = "usw2-az2" -> (known after apply)
      ~ id                              = "subnet-0472b57d9ecd46678" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2b"
          ~ "Name" = "infra-private-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2b"
          ~ "Name"        = "infra-private-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[2] must be replaced
-/+ resource "aws_subnet" "private" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0057a9ba984a54d4f" -> (known after apply)
      ~ availability_zone_id            = "usw2-az3" -> (known after apply)
      ~ id                              = "subnet-0057a9ba984a54d4f" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2c"
          ~ "Name" = "infra-private-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2c"
          ~ "Name"        = "infra-private-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.private[3] must be replaced
-/+ resource "aws_subnet" "private" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0c5528a049367389c" -> (known after apply)
      ~ availability_zone_id            = "usw2-az4" -> (known after apply)
      ~ id                              = "subnet-0c5528a049367389c" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2d"
          ~ "Name" = "infra-private-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2d"
          ~ "Name"        = "infra-private-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[0] must be replaced
-/+ resource "aws_subnet" "public" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-005ee48bc9a39e138" -> (known after apply)
      ~ availability_zone_id            = "usw2-az1" -> (known after apply)
      ~ id                              = "subnet-005ee48bc9a39e138" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2a"
          ~ "Name" = "infra-public-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2a"
          ~ "Name"        = "infra-public-us-west-2a" -> "withme-services-infra-us-west-2-automation-default-0"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[1] must be replaced
-/+ resource "aws_subnet" "public" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0ab5637d22c77cb95" -> (known after apply)
      ~ availability_zone_id            = "usw2-az2" -> (known after apply)
      ~ id                              = "subnet-0ab5637d22c77cb95" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2b"
          ~ "Name" = "infra-public-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2b"
          ~ "Name"        = "infra-public-us-west-2b" -> "withme-services-infra-us-west-2-automation-default-1"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[2] must be replaced
-/+ resource "aws_subnet" "public" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-093c1da07a9e5536c" -> (known after apply)
      ~ availability_zone_id            = "usw2-az3" -> (known after apply)
      ~ id                              = "subnet-093c1da07a9e5536c" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2c"
          ~ "Name" = "infra-public-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2c"
          ~ "Name"        = "infra-public-us-west-2c" -> "withme-services-infra-us-west-2-automation-default-2"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.networking.aws_subnet.public[3] must be replaced
-/+ resource "aws_subnet" "public" {
      ~ arn                             = "arn:aws:ec2:us-west-2:126252960572:subnet/subnet-0b648a9264266c545" -> (known after apply)
      ~ availability_zone_id            = "usw2-az4" -> (known after apply)
      ~ id                              = "subnet-0b648a9264266c545" -> (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      - map_customer_owned_ip_on_launch = false -> null
      ~ owner_id                        = "126252960572" -> (known after apply)
      ~ tags                            = {
          + "Az"   = "us-west-2d"
          ~ "Name" = "infra-public-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
        }
      ~ tags_all                        = {
          + "Az"          = "us-west-2d"
          ~ "Name"        = "infra-public-us-west-2d" -> "withme-services-infra-us-west-2-automation-default-3"
            # (6 unchanged elements hidden)
        }
      ~ vpc_id                          = "vpc-0fa06b2e41751a7be" -> (known after apply) # forces replacement
        # (4 unchanged attributes hidden)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.proxy_sg.aws_security_group.proxy_sg will be created
  + resource "aws_security_group" "proxy_sg" {
      + arn                    = (known after apply)
      + description            = "proxy for cloudformation stacks so a stack can be deleted without having to break the sg links to other resources"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "foo"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Role"        = "automation"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.proxy_sg.aws_security_group_rule.same_group_egress will be created
  + resource "aws_security_group_rule" "same_group_egress" {
      + description              = "hosts allowed to reach each other"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.proxy_sg.aws_security_group_rule.same_group_ingress will be created
  + resource "aws_security_group_rule" "same_group_ingress" {
      + description              = "hosts allowed to reach each other"
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.stack["nodegroup1"].data.template_file.amazon-eks-nodegroup_yaml will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "amazon-eks-nodegroup_yaml"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            AWSTemplateFormatVersion: 2010-09-09
            Description: Amazon EKS - Node Group
            Parameters:
              ProxySecurityGroup:
                Description: >-
                  Proxy group so deleting stacks doesn't require deleting the security
                  group.
                Type: 'AWS::EC2::SecurityGroup::Id'
              AssociatePublicIpAddress:
                Description: Whether or not to give instance a public IP
                Type: String
              KeyName:
                Description: The EC2 Key Pair to allow SSH access to the instances
                Type: 'AWS::EC2::KeyPair::KeyName'
              NodeImageId:
                Description: AMI id for the node instances.
                Type: 'AWS::EC2::Image::Id'
              NodeInstanceType:
                Description: EC2 instance type for the node instances
                Type: String
                Default: t3.medium
                ConstraintDescription: Must be a valid EC2 instance type
                AllowedValues:
                  - t2.small
                  - t2.medium
                  - t2.large
                  - t2.xlarge
                  - t2.2xlarge
                  - t3.nano
                  - t3.micro
                  - t3.small
                  - t3.medium
                  - t3.large
                  - t3.xlarge
                  - t3.2xlarge
                  - m3.medium
                  - m3.large
                  - m3.xlarge
                  - m3.2xlarge
                  - m4.large
                  - m4.xlarge
                  - m4.2xlarge
                  - m4.4xlarge
                  - m4.10xlarge
                  - m5.large
                  - m5.xlarge
                  - m5.2xlarge
                  - m5.4xlarge
                  - m5.12xlarge
                  - m5.24xlarge
                  - c4.large
                  - c4.xlarge
                  - c4.2xlarge
                  - c4.4xlarge
                  - c4.8xlarge
                  - c5.large
                  - c5.xlarge
                  - c5.2xlarge
                  - c5.4xlarge
                  - c5.9xlarge
                  - c5.18xlarge
                  - i3.large
                  - i3.xlarge
                  - i3.2xlarge
                  - i3.4xlarge
                  - i3.8xlarge
                  - i3.16xlarge
                  - r3.xlarge
                  - r3.2xlarge
                  - r3.4xlarge
                  - r3.8xlarge
                  - r4.large
                  - r4.xlarge
                  - r4.2xlarge
                  - r4.4xlarge
                  - r4.8xlarge
                  - r4.16xlarge
                  - x1.16xlarge
                  - x1.32xlarge
                  - p2.xlarge
                  - p2.8xlarge
                  - p2.16xlarge
                  - p3.2xlarge
                  - p3.8xlarge
                  - p3.16xlarge
                  - p3dn.24xlarge
                  - r5.large
                  - r5.xlarge
                  - r5.2xlarge
                  - r5.4xlarge
                  - r5.12xlarge
                  - r5.24xlarge
                  - r5d.large
                  - r5d.xlarge
                  - r5d.2xlarge
                  - r5d.4xlarge
                  - r5d.12xlarge
                  - r5d.24xlarge
                  - z1d.large
                  - z1d.xlarge
                  - z1d.2xlarge
                  - z1d.3xlarge
                  - z1d.6xlarge
                  - z1d.12xlarge
              NodeAutoScalingGroupMinSize:
                Description: Minimum size of Node Group ASG.
                Type: Number
                Default: 1
              NodeAutoScalingGroupMaxSize:
                Description: >-
                  Maximum size of Node Group ASG. Set to at least 1 greater than
                  NodeAutoScalingGroupDesiredCapacity.
                Type: Number
                Default: 4
              NodeAutoScalingGroupDesiredCapacity:
                Description: Desired capacity of Node Group ASG.
                Type: Number
                Default: 1
              NodeVolumeSize:
                Description: Node volume size
                Type: Number
                Default: 20
              ClusterName:
                Description: >-
                  The cluster name provided when the cluster was created. If it is
                  incorrect, nodes will not be able to join the cluster.
                Type: String
              BootstrapArguments:
                Description: >-
                  Arguments to pass to the bootstrap script. See files/bootstrap.sh in
                  https://github.com/awslabs/amazon-eks-ami
                Type: String
                Default: ''
              NodeGroupName:
                Description: Unique identifier for the Node Group.
                Type: String
              ClusterControlPlaneSecurityGroup:
                Description: The security group of the cluster control plane.
                Type: 'AWS::EC2::SecurityGroup::Id'
              VpcId:
                Description: The VPC of the worker instances
                Type: 'AWS::EC2::VPC::Id'
              Subnets:
                Description: The subnets where workers can be created.
                Type: 'List<AWS::EC2::Subnet::Id>'
            Metadata:
              'AWS::CloudFormation::Interface':
                ParameterGroups:
                  - Label:
                      default: EKS Cluster
                    Parameters:
                      - ClusterName
                      - ClusterControlPlaneSecurityGroup
                  - Label:
                      default: Worker Node Configuration
                    Parameters:
                      - NodeGroupName
                      - NodeAutoScalingGroupMinSize
                      - NodeAutoScalingGroupDesiredCapacity
                      - NodeAutoScalingGroupMaxSize
                      - NodeInstanceType
                      - NodeImageId
                      - NodeVolumeSize
                      - KeyName
                      - BootstrapArguments
                  - Label:
                      default: Worker Network Configuration
                    Parameters:
                      - VpcId
                      - Subnets
              'AWS::CloudFormation::Designer':
                a5e901b8-5f89-48bf-a0d2-bc5967e17185:
                  size:
                    width: 60
                    height: 60
                  position:
                    x: 90
                    'y': 80
                  z: 1
                  embeds: []
                9ea24f46-2eed-4bf8-b377-96fa2c743f6c:
                  source:
                    id: a5e901b8-5f89-48bf-a0d2-bc5967e17185
                  target:
                    id: a5e901b8-5f89-48bf-a0d2-bc5967e17185
                  z: 1
                1b52bbf1-16d8-4ed0-9b22-3cbd3735029e:
                  size:
                    width: 60
                    height: 60
                  position:
                    x: -150
                    'y': 130
                  z: 1
                  embeds: []
                0a2324db-a007-4e36-aa4a-4d9afcae197a:
                  size:
                    width: 60
                    height: 60
                  position:
                    x: 60
                    'y': 210
                  z: 1
                  embeds: []
                  isassociatedwith:
                    - 1b52bbf1-16d8-4ed0-9b22-3cbd3735029e
                b76b1871-831a-427c-b882-3b931157829a:
                  size:
                    width: 60
                    height: 60
                  position:
                    x: 180
                    'y': 210
                  z: 1
                  embeds: []
                  isassociatedwith:
                    - a5e901b8-5f89-48bf-a0d2-bc5967e17185
                2a22b6ba-cf7e-4881-b028-ee9fe8670c1c:
                  size:
                    width: 60
                    height: 60
                  position:
                    x: 370
                    'y': 180
                  z: 1
                  embeds: []
                  isassociatedwith:
                    - b76b1871-831a-427c-b882-3b931157829a
            Resources:
              NodeInstanceProfile:
                Type: 'AWS::IAM::InstanceProfile'
                Properties:
                  Path: /
                  Roles:
                    - !Ref NodeInstanceRole
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: 0a2324db-a007-4e36-aa4a-4d9afcae197a
              NodeInstanceRole:
                Type: 'AWS::IAM::Role'
                Properties:
                  AssumeRolePolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Principal:
                          Service: ec2.amazonaws.com
                        Action: 'sts:AssumeRole'
                  Path: /
                  ManagedPolicyArns:
                    - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
                    - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
                    - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: 1b52bbf1-16d8-4ed0-9b22-3cbd3735029e
              NodeSecurityGroup:
                Type: 'AWS::EC2::SecurityGroup'
                Properties:
                  GroupDescription: Security group for all nodes in the cluster
                  VpcId: !Ref VpcId
                  Tags:
                    - Key: !Sub 'kubernetes.io/cluster/$${ClusterName}'
                      Value: owned
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: a5e901b8-5f89-48bf-a0d2-bc5967e17185
              NodeSecurityGroupIngress:
                Type: 'AWS::EC2::SecurityGroupIngress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: Allow node to communicate with each other
                  GroupId: !Ref NodeSecurityGroup
                  SourceSecurityGroupId: !Ref NodeSecurityGroup
                  IpProtocol: -1
                  FromPort: 0
                  ToPort: 65535
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: 9ea24f46-2eed-4bf8-b377-96fa2c743f6c
              NodeSecurityGroupFromControlPlaneIngress:
                Type: 'AWS::EC2::SecurityGroupIngress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: >-
                    Allow worker Kubelets and pods to receive communication from the cluster
                    control plane
                  GroupId: !Ref NodeSecurityGroup
                  SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
                  IpProtocol: tcp
                  FromPort: 1025
                  ToPort: 65535
              ControlPlaneEgressToNodeSecurityGroup:
                Type: 'AWS::EC2::SecurityGroupEgress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: >-
                    Allow the cluster control plane to communicate with worker Kubelet and
                    pods
                  GroupId: !Ref ClusterControlPlaneSecurityGroup
                  DestinationSecurityGroupId: !Ref NodeSecurityGroup
                  IpProtocol: tcp
                  FromPort: 1025
                  ToPort: 65535
              NodeSecurityGroupFromControlPlaneOn443Ingress:
                Type: 'AWS::EC2::SecurityGroupIngress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: >-
                    Allow pods running extension API servers on port 443 to receive
                    communication from cluster control plane
                  GroupId: !Ref NodeSecurityGroup
                  SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
                  IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
              ControlPlaneEgressToNodeSecurityGroupOn443:
                Type: 'AWS::EC2::SecurityGroupEgress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: >-
                    Allow the cluster control plane to communicate with pods running
                    extension API servers on port 443
                  GroupId: !Ref ClusterControlPlaneSecurityGroup
                  DestinationSecurityGroupId: !Ref NodeSecurityGroup
                  IpProtocol: tcp
                  FromPort: 443
                  ToPort: 443
              ClusterControlPlaneSecurityGroupIngress:
                Type: 'AWS::EC2::SecurityGroupIngress'
                DependsOn: NodeSecurityGroup
                Properties:
                  Description: Allow pods to communicate with the cluster API Server
                  GroupId: !Ref ClusterControlPlaneSecurityGroup
                  SourceSecurityGroupId: !Ref NodeSecurityGroup
                  IpProtocol: tcp
                  ToPort: 443
                  FromPort: 443
              NodeGroup:
                Type: 'AWS::AutoScaling::AutoScalingGroup'
                Properties:
                  DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
                  LaunchConfigurationName: !Ref NodeLaunchConfig
                  MinSize: !Ref NodeAutoScalingGroupMinSize
                  MaxSize: !Ref NodeAutoScalingGroupMaxSize
                  VPCZoneIdentifier: !Ref Subnets
                  Tags:
                    - Key: Name
                      Value: !Sub '$${ClusterName}-$${NodeGroupName}-Node'
                      PropagateAtLaunch: true
                    - Key: !Sub 'kubernetes.io/cluster/$${ClusterName}'
                      Value: owned
                      PropagateAtLaunch: true
                UpdatePolicy:
                  AutoScalingRollingUpdate:
                    MaxBatchSize: 6
                    MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
                    PauseTime: PT5M
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: 2a22b6ba-cf7e-4881-b028-ee9fe8670c1c
              NodeLaunchConfig:
                Type: 'AWS::AutoScaling::LaunchConfiguration'
                Properties:
                  AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
                  IamInstanceProfile: !Ref NodeInstanceProfile
                  ImageId: !Ref NodeImageId
                  InstanceType: !Ref NodeInstanceType
                  KeyName: !Ref KeyName
                  SecurityGroups:
                    - !Ref NodeSecurityGroup
                    - !Ref ProxySecurityGroup
                  BlockDeviceMappings:
                    - DeviceName: /dev/xvda
                      Ebs:
                        VolumeSize: !Ref NodeVolumeSize
                        VolumeType: gp2
                        DeleteOnTermination: true
                  UserData:
                    'Fn::Base64': !Sub |
                      #!/bin/bash
                      set -o xtrace
                      /etc/eks/bootstrap.sh $${ClusterName} $${BootstrapArguments}
                      /opt/aws/bin/cfn-signal --exit-code $$? \
                               --stack  $${AWS::StackName} \
                               --resource NodeGroup  \
                               --region $${AWS::Region}
                Metadata:
                  'AWS::CloudFormation::Designer':
                    id: b76b1871-831a-427c-b882-3b931157829a
            Outputs:
              NodeInstanceRole:
                Description: The node instance role
                Value: !GetAtt NodeInstanceRole.Arn
              NodeSecurityGroup:
                Description: The security group for the node group
                Value: !Ref NodeSecurityGroup
        EOT
    }

  # module.vpcs["vpc1"].module.eks_targets["infra1"].module.stack["nodegroup1"].aws_cloudformation_stack.stack will be created
  + resource "aws_cloudformation_stack" "stack" {
      + capabilities  = [
          + "CAPABILITY_IAM",
        ]
      + id            = (known after apply)
      + name          = "nodegroup1"
      + outputs       = (known after apply)
      + parameters    = (known after apply)
      + policy_body   = (known after apply)
      + tags          = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Region"      = "us-west-2"
          + "Role"        = "automation"
        }
      + tags_all      = {
          + "Config"      = "default"
          + "Dept"        = "services"
          + "Environment" = "infra"
          + "GeneratedBy" = "terraform"
          + "Org"         = "withme"
          + "Region"      = "us-west-2"
          + "Role"        = "automation"
        }
      + template_body = (known after apply)
    }

Plan: 50 to add, 5 to change, 39 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
