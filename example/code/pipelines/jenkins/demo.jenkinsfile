package jenkins

def qairon = library 'qairon'


properties(
        [
                parameters(
                        [string(defaultValue: '', description: '', name: 'SERVICE_ID', trim: true),
                         [
                                 $class              : 'CascadeChoiceParameter',
                                 choiceType          : 'PT_MULTI_SELECT',
                                 description         : '',
                                 filterLength        : 3,
                                 filterable          : true,
                                 name                : 'BUILD_ID',
                                 randomName          : 'choice-parameter-4620443893435',
                                 referencedParameters: 'SERVICE_ID',
                                 script              : [
                                         $class        : 'GroovyScript',
                                         fallbackScript: [
                                                 classpath: [],
                                                 sandbox  : false,
                                                 script   : ''
                                         ],
                                         script        : [
                                                 classpath: [],
                                                 sandbox  : false,

                                                 script   : """
                                                    package qairon.global_deployer

import groovy.json.JsonSlurper

svc_ids = groovy.json.JsonOutput.toJson(SERVICE_ID.split(","))

def common = load "../common.groovy"

try {
    List<String> resultArray = new ArrayList<String>()
    url = 'http://qairon:5001/api/rest/v1/build?q={"filters":[{"name":"service_id","op":"in","val":' + svc_ids + '}]}'

    HttpURLConnection connection = new URL(url).openConnection()
    connection.connect()
    if (connection.responseCode == 200) {
        jsonSlurper = new JsonSlurper()
        // get the JSON response
        inStream = connection.inputStream
        builds = jsonSlurper.parse(inStream).objects
        builds.objects
        builds.each { build -> resultArray.add(build.id) }
        connection.disconnect()

        return resultArray


    } else {
        print connection.responseCode + ": " + connection.inputStream.text

    }


} catch (e) {
    print(e)
}


                                                    
                                                """
                                         ]
                                 ]
                         ],
                         [
                                 $class              : 'CascadeChoiceParameter',
                                 choiceType          : 'PT_MULTI_SELECT',
                                 description         : '',
                                 filterLength        : 3,
                                 filterable          : true,
                                 name                : 'RELEASE_ID',
                                 randomName          : 'choice-parameter-4620449435654',
                                 referencedParameters: 'BUILD_ID',
                                 script              : [
                                         $class        : 'GroovyScript',
                                         fallbackScript: [
                                                 classpath: [],
                                                 sandbox  : false,
                                                 script   : ''
                                         ],
                                         script        : [
                                                 classpath: [],
                                                 sandbox  : false,
                                                 script   : """ """
                                         ]
                                 ]

                         ],
                         [
                                 $class              : 'CascadeChoiceParameter',
                                 choiceType          : 'PT_MULTI_SELECT',
                                 description         : '',
                                 filterLength        : 3,
                                 filterable          : true,
                                 name                : 'DEPLOYMENT_ID',
                                 randomName          : 'choice-parameter-4620453824735',
                                 referencedParameters: 'RELEASE_ID',
                                 script              : [
                                         $class        : 'GroovyScript',
                                         fallbackScript: [
                                                 classpath: [],
                                                 sandbox  : false,
                                                 script   : ''
                                         ],
                                         script        : [
                                                 classpath: [],
                                                 sandbox  : false,
                                                 script   : """ """
                                         ]
                                 ]

                         ]


                        ]
                )
        ]
)


node('jenkins-agent') {
    container(name: 'jnlp') {
        stage('launch node') {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'main']], extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false], [$class: 'RelativeTargetDirectory', relativeTargetDir: 'withme-ops']], userRemoteConfigs: [[credentialsId: 'bitbucket_ssh_key', name: 'origin', url: 'git@bitbucket.org:imvu/withme-ops.git']]]
            sh returnStdout: true, script: 'find .'

            def common = load "${WORKSPACE}/withme-ops/example/code/lib/jenkins/common.groovy"
            def base = load "${WORKSPACE}/withme-ops/example/code/lib/jenkins/base.groovy"

        }
    }
}
