AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy configured VPC for EKS'

Parameters:

  ClusterName:
    Type: String
    Description: Name of k8s cluster will be used for tagging resources

  VPCCIDR:
    Type: String
    Description: The CIDR range for the VPC.

  PublicSubnet01CIDR:
    Type: String
    Description: CIDR for Public subnet 01 within the VPC

  PublicSubnet02CIDR:
    Type: String
    Description: CIDR for Public subnet 02 within the VPC

  PublicSubnet03CIDR:
    Type: String
    Description: CIDR for Public subnet 03 within the VPC

  PrivateSubnet01CIDR:
    Type: String
    Description: CIDR for Private subnet 01 within the VPC

  PrivateSubnet02CIDR:
    Type: String
    Description: CIDR for Private subnet 02 within the VPC

  PrivateSubnet03CIDR:
    Type: String
    Description: CIDR for Private subnet 03 within the VPC

  AtlasVPCpeeringID:
    Type: String
    Description: VPCpeering ID of MongoDB Atlas

  AtlasVpcCIDR:
    Type: String
    Description: CIDDR of MongoDB Atlas VPC

  AtlasVPCpeeringEnabled:
    Type: String
    AllowedValues:
      - true
      - false
      - ''
    Default: ''
    Description: Enable VPC Routes for MongoDB Atlas VPC

#-------------------------------------------------------------------#
############################################### Template Conditions #
Conditions:
  AtlasVPCpeeringRoutes: !Equals [ !Ref AtlasVPCpeeringEnabled, true ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::Region}-${AWS::StackName}-VPC'
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: shared

#-------------------------------------------------------------------#
######################################## PublicSubnetsConfiguration #

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet01CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet02CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PublicSubnet03CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PubliSubnet03"

#-------------------------------------------------------------------#
####################################### PrivateSubnetsConfiguration #

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet01CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet02CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"

  PrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref PrivateSubnet03CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: kubernetes.io/role/internal-elb
        Value: '1'
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet03"

#-------------------------------------------------------------------#
################################### PublicSubnetsRouteConfiguration #

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn: [ InternetGateway ]
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets RouteTable
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet03
      RouteTableId: !Ref PublicRouteTable

#-------------------------------------------------------------------#
############################### VPCpeering route for Public subnets #
  PublicSubnet01peeringRoute:
    Condition: AtlasVPCpeeringRoutes
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref AtlasVpcCIDR
      VpcPeeringConnectionId: !Ref AtlasVPCpeeringID

#-------------------------------------------------------------------#
################################## PrivateSubnetsRouteConfiguration #

  PrivateSubnet01RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet01 RouteTable
      - Key: Network
        Value: Private

  PrivateSubnet02RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet02 RouteTable
      - Key: Network
        Value: Private

  PrivateSubnet03RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet03 RouteTable
      - Key: Network
        Value: Private

  PrivateSubnet01Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet02Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet02RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet03Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet03RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateSubnet01RouteTable

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateSubnet02RouteTable

  PrivateSubnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet03
      RouteTableId: !Ref PrivateSubnet03RouteTable

  NAT1EIP:
    Type: AWS::EC2::EIP
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      Domain: vpc

  NAT2EIP:
    Type: AWS::EC2::EIP
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      Domain: vpc

  NAT3EIP:
    Type: AWS::EC2::EIP
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      AllocationId: !GetAtt NAT1EIP.AllocationId
      SubnetId: !Ref PublicSubnet01

  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      AllocationId: !GetAtt NAT2EIP.AllocationId
      SubnetId: !Ref PublicSubnet02

  NATGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: [ VPCGatewayAttachment ]
    Properties:
      AllocationId: !GetAtt NAT3EIP.AllocationId
      SubnetId: !Ref PublicSubnet03

#-------------------------------------------------------------------#
############################# VPCpeering routes for Private subnets #
# Note: VPCpeeringID & AtlasVpcCIDR is a dilemma "chicken or the egg", so for creating cluster from the scratch "VPCpeering routes" must be commented.
  PrivateSubnet01peeringRoute:
    Condition: AtlasVPCpeeringRoutes
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet01RouteTable
      DestinationCidrBlock: !Ref AtlasVpcCIDR
      VpcPeeringConnectionId: !Ref AtlasVPCpeeringID

  PrivateSubnet02peeringRoute:
    Condition: AtlasVPCpeeringRoutes
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet02RouteTable
      DestinationCidrBlock: !Ref AtlasVpcCIDR
      VpcPeeringConnectionId: !Ref AtlasVPCpeeringID

  PrivateSubnet03peeringRoute:
    Condition: AtlasVPCpeeringRoutes
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet03RouteTable
      DestinationCidrBlock: !Ref AtlasVpcCIDR
      VpcPeeringConnectionId: !Ref AtlasVPCpeeringID

#-------------------------------------------------------------------#
################################################## Template Outputs #

Outputs:

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  PubSubnetIDList:
    Description: List of all public subnets in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PublicSubnet03 ] ]

  PrivSubnetIDList:
    Description: List of all private subnets in the VPC
    Value: !Join [ ",", [ !Ref PrivateSubnet01, !Ref PrivateSubnet02, !Ref PrivateSubnet03 ] ]

  PubSubnet01ID:
    Description: ID of PubSubnet01
    Value: !Ref PublicSubnet01

  PubSubnet02ID:
    Description: ID of PubSubnet02
    Value: !Ref PublicSubnet02

  PubSubnet03ID:
    Description: ID of PubSubnet03
    Value: !Ref PublicSubnet03

  PrivSubnet01ID:
    Description: ID of PrivSubnet01
    Value: !Ref PrivateSubnet01

  PrivSubnet02ID:
    Description: ID of PrivSubnet02
    Value: !Ref PrivateSubnet02

  PrivSubnet03ID:
    Description: ID of PrivSubnet03
    Value: !Ref PrivateSubnet03

  NATipLIST:
    Description: List of all NATGateways IP's
    Value: !Join [ ",", [ !Ref NAT1EIP, !Ref NAT2EIP, !Ref NAT3EIP ] ]

  NAT1ip:
    Description: IP of NATGateway1
    Value: !Ref NAT1EIP

  NAT2ip:
    Description: IP of NATGateway2
    Value: !Ref NAT2EIP

  NAT3ip:
    Description: IP of NATGateway3
    Value: !Ref NAT3EIP
