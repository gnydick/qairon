AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy bastion'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - SystemsManagerAccess
      - LogsRetentionInDays
      - RootVolumeSize
      - BastionMinSize
      - BastionMaxSize
      - BastionDesiredCapacity
Parameters:

  ClusterName:
    Type: String
    Description: Name of k8s cluster

  ClusterArn:
    Type: String
    Description: Arn of k8s cluster

  VPCID:
    Description: 'ID of the VPC (e.g., vpc-0343606e).'
    Type: String

  PublicSubnet1ID:
    Description: ID of the public subnet 1 that you want to provision the first bastion
      into (e.g., subnet-a0246dcd).
    Type: 'AWS::EC2::Subnet::Id'

  PublicSubnet2ID:
    Description: ID of the public subnet 2 that you want to provision the second bastion into
      (e.g., subnet-e3246d8e).
    Type: 'AWS::EC2::Subnet::Id'

  PublicSubnet3ID:
    Description: ID of the public subnet 3 that you want to provision the third bastion into
      (e.g., subnet-e3246d8e).
    Type: 'AWS::EC2::Subnet::Id'

  InstanceType:
    Description: 'Instance type of the SSH bastion host/instance.'
    Type: String

  RootVolumeSize:
    Description: The size in GB for the root EBS volume.
    Type: Number

  BastionMinSize:
    Description: Minimum size of Bastion Group ASG.
    Type: Number

  BastionMaxSize:
    Description: Maximum size of Bastion Group ASG. Set to at least 1 greater than BastionAutoScalingGroupDesiredCapacity.
    Type: Number

  BastionDesiredCapacity:
    Description: Desired capacity of Bastion Group ASG.
    Type: Number

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  HelmVersion:
    Description: 'Version of Helm'
    Type: String

  SternVersion:
    Description: 'Version of Stern'
    Type: String

  K9sVersion:
    Description: 'Version of k9s'
    Type: String

  VaultVersion:
    Description: 'Version of Vault'
    Type: String

  GradleVersion:
    Description: 'Version of Gradle'
    Type: String

Mappings:

  RegionMap:
    'eu-north-1':
      AMI: 'ami-0c947472aff72870d'
    'ap-south-1':
      AMI: 'ami-040c7ad0a93be494e'
    'eu-west-3':
      AMI: 'ami-05a51ff00c1d77571'
    'eu-west-2':
      AMI: 'ami-00e8b55a2e841be44'
    'eu-west-1':
      AMI: 'ami-040ba9174949f6de4'
    'ap-northeast-2':
      AMI: 'ami-02b3330196502d247'
    'me-south-1':
      AMI: 'ami-0207e6a966ca96048'
    'ap-northeast-1':
      AMI: 'ami-0064e711cbc7a825e'
    'sa-east-1':
      AMI: 'ami-053f8b6627112b46e'
    'ca-central-1':
      AMI: 'ami-007dbcbce3118978b'
    'ap-east-1':
      AMI: 'ami-ff4d378e'
    'ap-southeast-1':
      AMI: 'ami-00942d7cd4f3ca5c0'
    'ap-southeast-2':
      AMI: 'ami-08a74056dfd30c986'
    'eu-central-1':
      AMI: 'ami-0f3a43fbf2d3899f7'
    'us-east-1':
      AMI: 'ami-00dc79254d0461090'
    'us-east-2':
      AMI: 'ami-00bf61217e296b409'
    'us-west-1':
      AMI: 'ami-024c80694b5b3e51a'
    'us-west-2':
      AMI: 'ami-0a85857bfc5345c38'

Resources:

  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref IAMRole

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      Policies:
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                 - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
                 - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
                 - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
                 - 'ssm:ListInstanceAssociations' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
                Resource: 
                - '*'
        - PolicyName: 'eks'
          PolicyDocument:
           Version: '2012-10-17'
           Statement:
           - Effect: Allow
             Action:
              - 'eks:*'
             Resource: !Ref ClusterArn
        - PolicyName: logs
          PolicyDocument:
           Version: '2012-10-17'
           Statement:
           - Effect: Allow
             Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
             Resource: !GetAtt 'Logs.Arn'
        - PolicyName: 'secretmanagerRead'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetResourcePolicy'
                - 'secretsmanager:ListSecrets'
                - 'secretsmanager:GetSecretValue'
                - 'secretsmanager:DescribeSecret'
                - 'secretsmanager:ListSecretVersionIds'
              Resource:
                - 'arn:aws:secretsmanager:us-west-2:407733091588:secret:vault_approle-q2kTWR'
        - PolicyName: 'kmsDecrypt'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - 'kms:Decrypt'
                - "kms:DescribeKey"
              Resource:
                - '*'

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: [awslogs, config, preconf]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${Logs}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub | 
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
        preconf:
          packages:
            yum:
              git: []
              docker: []
              python3: []
              python3-devel: []
              jq: []
              mc: []
              telnet: []
          files:
            '/etc/yum.repos.d/mongodb-org-4.2.repo':
              mode: '000644'
              owner: root
              group: root
              content: !Sub |
                [mongodb-org-4.2]
                name=MongoDB Repository
                baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.2/x86_64/
                gpgcheck=1
                enabled=1
                gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc
            '/root/startup.sh':
              mode: '000750'
              owner: root
              group: root
              content: !Sub |
                #!/usr/bin/env bash
                # "Retry" function
                function retry_command() {
                    local -r __tries="$1"; shift
                    local -r __run="$@"
                    local -i __backoff_delay=2

                    until $__run
                      do
                          if (( __current_try == __tries ))
                          then
                            echo "Tried $__current_try times and failed!"
                            return 1
                          else
                            echo "Retrying ...."
                            sleep $((((__backoff_delay++)) + ((__current_try++))))
                          fi
                     done
                  }
                cd /tmp
                # Upgrade PIP and install awscli if not exist
                pip3 install --upgrade pip &> /dev/null && pip3 install awscli --ignore-installed six &> /dev/null

                # Install MongoDB CLI & Corretto 8
                amazon-linux-extras enable corretto8 && yum update -y && yum install -y mongodb-org-tools mongodb-org-shell java-1.8.0-amazon-corretto-devel

                # Install Gradle
                GRADLE_HOME=/opt/gradle
                retry_command 20 wget -qO gradle.zip https://services.gradle.org/distributions/gradle-${GradleVersion}-bin.zip
                mkdir -p ${!GRADLE_HOME} && unzip gradle.zip && mv gradle-${GradleVersion}/* ${!GRADLE_HOME}/ && ln -s ${!GRADLE_HOME}/bin/gradle /usr/bin/
                
                # Install Vault
                retry_command 20 curl -sS https://releases.hashicorp.com/vault/${VaultVersion}/vault_${VaultVersion}_linux_amd64.zip > vault.zip
                unzip vault.zip -d /bin/ && chmod +x /bin/vault

                # Install Helm 3
                retry_command 20 curl -L https://get.helm.sh/helm-v${HelmVersion}-linux-amd64.tar.gz | tar xvz
                mv linux-amd64/helm /bin/helm && chmod +x /bin/helm 

                # Install Kubectl and aws-iam-authenticator
                ## Download and configure kubectl & aws-iam-authenticator
                retry_command 20 curl -o /usr/bin/kubectl https://amazon-eks.s3-${AWS::Region}.amazonaws.com/1.16.15/2020-11-02/bin/linux/amd64/kubectl && chmod +x /usr/bin/kubectl
                retry_command 20 curl -o /usr/bin/aws-iam-authenticator https://amazon-eks.s3-${AWS::Region}.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator && chmod +x /usr/bin/aws-iam-authenticator

                # Install "Stern" k8s logs monitoring tool
                retry_command 20 curl -o /usr/bin/stern https://github.com/wercker/stern/releases/download/${SternVersion}/stern_linux_amd64 && chmod +x /usr/bin/stern

                # Install "k9s" k8s cli tool
                retry_command 20 curl -L https://github.com/derailed/k9s/releases/download/v${K9sVersion}/k9s_Linux_x86_64.tar.gz | tar xvz 
                mv k9s /bin/k9s && chmod +x /bin/k9s

                # Configure bashrc
                echo -e "source <(kubectl completion bash)\ncomplete -C /usr/bin/vault vault \nsource <(helm completion bash) \
                 \nalias l='ls -alh'\nalias c='clear'\nalias ecrlogin='aws ecr get-login --no-include-email | bash -e' \nalias configure_env='cd ~ && /home/setup.sh' \
                 \nexport VAULT_ADDR=https://vault.withme.com \nexport PATH=/home/ssm-user/.local/bin:$PATH" >> /etc/bashrc
            '/home/setup.sh':
              mode: '000755'
              owner: root
              group: root
              content: !Sub |
                #!/usr/bin/env bash
                # Create "kubeconfig" for prod-1 EKS"
                echo "Create Kubeconfig for ${ClusterName} cluster"
                aws eks --region ${AWS::Region} update-kubeconfig --name ${ClusterName} || echo "Unable to create Kubeconfig file"
                # Configure local docker
                if [ $(getent group docker) ]; then
                  sudo usermod -aG docker ssm-user && sudo chmod 666 /var/run/docker.sock
                else
                  echo "group does not exist."
                fi
                # login to ECR
                export AWS_DEFAULT_REGION=${AWS::Region}
                echo "Logging in to ECR:"
                aws ecr get-login --no-include-email | bash -e || echo "Unable login to ECR!\nCheck env AWS_DEFAULT_REGION or InstanceRole attached ECR policy"
                # Check py3 and pip3
                pip3 -V && python3 --version
                # Function for login in Vault CLI
                function vault_login {
                    EGO_VAULT_ROLE_ID=$(aws secretsmanager get-secret-value --secret-id vault_approle --query SecretString --region ${AWS::Region} --output text | jq -r .RoleID)
                    EGO_VAULT_SECRET_ID=$(aws secretsmanager get-secret-value --secret-id vault_approle --query SecretString --region ${AWS::Region} --output text | jq -r .SecretID)
                    vault_token=`vault write -format=json auth/approle/login role_id=${!EGO_VAULT_ROLE_ID} secret_id=${!EGO_VAULT_SECRET_ID} | jq .auth.client_token | sed -e 's/^"//' -e 's/"$//'`
                    vault login token=${!vault_token} > /dev/null 2>&1
                }
                # Function for fetching secrets from the Vault and pass them to ENV variables
                function get_secret() {
                    local _vault_path=$1
                    local _secret_key=$2
                    export ${!_secret_key}=$(vault kv get -format=json ${!_vault_path} | jq -r '.data.'${!_secret_key}'')
                }
                # Fetch Vault secrets
                vault_login
                get_secret cicd/artifactory ART_BUILD_PASSWORD

                # Configure access to Artifactory PiPy repo
                FILE=/home/ssm-user/.pip/pip.conf
                if [ -e "$FILE" ]; then
                  pip3 install --user --ignore-installed wheel colorama==0.3.9 kubernetes hook-eks resolver-yaml resolver-oidc sceptre > /dev/null 2>&1
                else
                  mkdir -p /home/ssm-user/.pip && echo -e "[global]\nindex-url = https://build:${!ART_BUILD_PASSWORD}@withme.jfrog.io/withme/api/pypi/ego-cicd-python-release/simple" >> /home/ssm-user/.pip/pip.conf
                  pip3 install --user --ignore-installed wheel colorama==0.3.9 kubernetes hook-eks resolver-yaml resolver-oidc sceptre yq
                fi
                # Vault revoke token
                vault token revoke -self
                EGO_VAULT_ROLE_ID=null
                EGO_VAULT_SECRET_ID=null
                echo -e "\n++++++++++The environment is ready to work!++++++++++\n"
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            run_startup_sh:
              command: '/root/startup.sh'
              cwd: '/root'
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}' ERR
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
          yum update -y

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref BastionMinSize
      MaxSize: !Ref BastionMaxSize
      DesiredCapacity: !Ref BastionDesiredCapacity
      Tags:
      - Key: Name
        Value: !Sub 'BastionInstance-${ClusterName}'
        PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
        - !Ref PublicSubnet3ID
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - ScheduledActions
        WaitOnResourceSignals: true

Outputs:

  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'

  NodeInstanceRole:
    Description: The bastion instances role ARN
    Value: !GetAtt IAMRole.Arn

  BastionRoleName:
    Description: The bastion instances role Name
    Value: !Ref IAMRole