def label = "perf-1-redeploy-${UUID.randomUUID().toString()}"

timestamps {

podTemplate(name: 'perf-1-redeploy', label: label, yaml: """
kind: Pod
metadata:
  name: microservice-orchestration
spec:
  containers:
  - name: microservice-orchestration
    image: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-cicd/microservice-orchestration:1.0.9
    imagePullPolicy: Always
    command:
    - /bin/cat
    tty: true
    env:
    - name: STACK_NAME
      value: "env-perf-1"
    - name: CLUSTER_NAME
      value: "perf-1"
"""
  ) {
node(label) {
  try {
    def secrets = [[$class: 'VaultSecret', path: 'cicd/aws_keys', secretValues: [
                  [$class: 'VaultSecretValue', envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
                  [$class: 'VaultSecretValue', envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]],
                [$class: 'VaultSecret', path: 'cicd/bitbucket', secretValues: [
                  [$class: 'VaultSecretValue', envVar: 'BITBUCKET_USER', vaultKey: 'BITBUCKET_USER'],
                  [$class: 'VaultSecretValue', envVar: 'BITBUCKET_APP_PASSWORD', vaultKey: 'BITBUCKET_APP_PASSWORD']]],
                [$class: 'VaultSecret', path: 'cicd/artifactory', secretValues: [
                  [$class: 'VaultSecretValue', envVar: 'ART_TOOL_USER', vaultKey: 'ART_TOOL_USER'],
                  [$class: 'VaultSecretValue', envVar: 'ART_TOOL_PASSWORD', vaultKey: 'ART_TOOL_PASSWORD'],
                  [$class: 'VaultSecretValue', envVar: 'ART_BUILD_USER', vaultKey: 'ART_BUILD_USER'],
                  [$class: 'VaultSecretValue', envVar: 'ART_BUILD_PASSWORD', vaultKey: 'ART_BUILD_PASSWORD']]],
                [$class: 'VaultSecret', path: 'cicd/integration/user-manager', secretValues: [
                  [$class: 'VaultSecretValue', envVar: 'GOOGLE_APPLICATION_CREDENTIALS', vaultKey: 'GOOGLE_APPLICATION_CREDENTIALS'],
                  [$class: 'VaultSecretValue', envVar: 'GOOGLE_API_KEY', vaultKey: 'GOOGLE_API_KEY']]]]

    withCredentials([string(credentialsId: 'EGO_VAULT_ROLE_ID', variable: 'EGO_VAULT_ROLE_ID'), string(credentialsId: 'EGO_VAULT_SECRET_ID', variable: 'EGO_VAULT_SECRET_ID')]) {
    echo "${EGO_VAULT_ROLE_ID}"

        wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
  properties([
          disableConcurrentBuilds()
      ])
    env.JOB_NAME = "${env.JOB_NAME}"
    env.BUILD_NUMBER = "${env.BUILD_NUMBER}"
    currentBuild.displayName = "#${env.BUILD_NUMBER}"

    stage('Configure aws account and kubectl config') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eox pipefail
        /toolbox/set-aws-credentials.sh --key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY}
        ### Check IAM user
        aws sts get-caller-identity --output text
        ### Configure kubectl
        aws eks --region us-west-2 update-kubeconfig --name ${CLUSTER_NAME}
        ### Check kubectl context
        kubectl config current-context
      '''
    }}
    stage('Redeploy microservices') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        HELM_VALUES_LIST=helm_values_list.txt
        ### Clone repo environment repository ###
        git clone https://${BITBUCKET_USER}:${BITBUCKET_APP_PASSWORD}@bitbucket.org/imvu/${STACK_NAME}.git
        ### Add "ego-helm-release" Helm repo  ###
        helm repo add ego-helm-release https://withme.jfrog.io/withme/ego-helm-release/ --username $ART_BUILD_USER --password $ART_BUILD_PASSWORD && helm repo update
        upgrade_ego_microservices () {
          ### Pull EGO Helm charts from Artifactory Helm repo ###
          helm repo add ego-helm-release https://withme.jfrog.io/withme/ego-helm-release/ --username $ART_BUILD_USER --password $ART_BUILD_PASSWORD && helm repo update
          #Create microservices list
          cd ${WORKSPACE}/${STACK_NAME}/k8s
          ls -l ${WORKSPACE}/${STACK_NAME}/k8s/microservice-tier -I "*.md" | awk '{ print $9 }' | awk NF > ${WORKSPACE}/${STACK_NAME}/k8s/${HELM_VALUES_LIST}
          cat ${WORKSPACE}/${STACK_NAME}/k8s/${HELM_VALUES_LIST}
          # Upgrade all EGO microservices.
            while IFS='' read -r line || [[ -n "$line" ]]; do
              ### Get APP_NAME
              APP_NAME=$(echo $line | sed "s/-values.yaml//g")
              ### Fetch credentials from Vault ###
              vault_token=$(vault write -address="https://vault.withme.com/" -format=json auth/approle/login role_id=${EGO_VAULT_ROLE_ID} secret_id=${EGO_VAULT_SECRET_ID} | jq .auth.client_token | sed -e 's/^"//' -e 's/"$//')
              vault login -address="https://vault.withme.com/" token=${vault_token} > /dev/null 2>&1
              fetchedSecrets=$(vault kv get -address="https://vault.withme.com/" -format=json cicd/${CLUSTER_NAME}/base64/${APP_NAME} | jq -r '.data | to_entries | .[] | .key + "=" + .value' | sed "s/^/--set-string secret.secretContents./g" | xargs ||:)
              ### Re-Deploy microservices with and without secrets in Vault ###
              if [[ -z "${fetchedSecrets}" ]]; then
                helm upgrade ${APP_NAME} ego-helm-release/ego-microservice -f ${WORKSPACE}/${STACK_NAME}/k8s/microservice-tier/${line} --namespace=default --install --wait --timeout 600s
              else
                helm upgrade ${APP_NAME} ego-helm-release/ego-microservice -f ${WORKSPACE}/${STACK_NAME}/k8s/microservice-tier/${line} --namespace=default --install --wait --timeout 600s ${fetchedSecrets}
              fi
              echo "${APP_NAME} Upgraded!"
            done < "${HELM_VALUES_LIST}"
        }
        ### Upgrade all EGO microservices
        upgrade_ego_microservices
      '''
    }}}}
    } catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
      stage('Send notifications') {
        container('microservice-orchestration')  {
        if (env.APP_NAME == '' || env.APP_VERSION == '') {
            print "ABORTED!"
          return
        } else {
            print "SUCCESS!"
        }
        if (currentBuild.result == 'FAILURE') {
            print "FAILURE!"
        } else {
        return
        }}}}
}}

} // End timestamps