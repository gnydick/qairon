######### MANAGEMENT #########
management:
  # management-server pod schedule type (Deployment, DaemonSet, StatefulSet)
  kind: Deployment

  # Docker image for pod
  image:
    repository: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-server/cleanspeak-management-server
    tag: 3.29.1

  # Cleanspeak "cleanspeak-management-server" is not a scaled app.
  # But I use that feature in case if future versions of "cleanspeak-management-server" will be scalable.
  replicas: 1

  # management-server labels configuration
  labels:
    # Add label "metrics: prometheus"
    metricsProm: false

  # Anti/Affinity rules
  affinity:
    nodeAffinity:
      key: perf-1-tier
      values: microservice
    podAntiAffinity:
      weight: 100
      key: app
      topologyKey: kubernetes.io/hostname

  # management-server pod annotations
  annotations:
    "readiness.status.sidecar.istio.io/applicationPorts": "8011"
    # traffic.sidecar.istio.io/excludeOutboundIPRanges: 0.0.0.0/0

  # Container startup command
  command: {}
    # - "/bin/bash"
    # - "-c"
    # - "./start.sh $(JVM_ARGS)"

  # management-server environment variables for pod
  env:
    DATABASE_URL: "jdbc:mysql://${CLEANSPEAK_RDS}:3306/cleanspeak?useSSL=false"
    CLEANSPEAK_SEARCH_SERVERS: "https://${CLEANSPEAK_ES}:443"
    DATABASE_ROOT_USER: "administrator"
    DATABASE_USER: "administrator"
    CLEANSPEAK_URL: "https://cs-perf-1.withme.com/"
    CLEANSPEAK_WEBSERVICE_URLS: "http://cleanspeak-webservice-server:8001/"

  # management-server pod resources
  resources:
    requests:
      cpu: "150m"
      memory: "1024Mi"
    limits:
      cpu: "300m"
      memory: "1024Mi"

  # livenessProbe configuration
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - "[ $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8011/status) -eq \"200\" ]"
    initialDelaySeconds: 60
    periodSeconds: 10
    failureThreshold: 10

  # readinessProbe configuration
  readinessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - "[ $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8011/status) -eq \"200\" ]"
    initialDelaySeconds: 60
    periodSeconds: 10
    failureThreshold: 10

  # management-server container ports
  containerPorts:
    - containerPort: 8011

  # k8s Service for management-server
  service:
    # k8s Service sessionAffinity
    sessionAffinity: ClientIP
    # k8s Service type
    type: NodePort
    # k8s Service ports (If you adding new ports make sure that you set them in "containerPorts" too)
    ports:
      - port: 8011
        targetPort: 8011
        name: http-rest

######### WEBSERVICE #########
webservice:

  # webservice-server pod schedule type (Deployment, DaemonSet, StatefulSet)
  kind: Deployment

  # Docker image for webservice-server pod
  image:
    repository: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-server/cleanspeak-webservice-server
    tag: 3.29.1

  # webservice-server replica pod count
  replicas: 2

  # webservice-server labels configuration
  labels:
    # Add label "metrics: prometheus"
    metricsProm: false

  # webservice-server update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

  # webservice-server Anti/Affinity rules
  affinity:
    nodeAffinity:
      key: perf-1-tier
      values: microservice
    podAntiAffinity:
      weight: 100
      key: app
      topologyKey: kubernetes.io/hostname

  # webservice-server pod annotations
  annotations:
    "readiness.status.sidecar.istio.io/applicationPorts": "8001"
    # traffic.sidecar.istio.io/excludeOutboundIPRanges: 0.0.0.0/0

  # webservice-server container startup command
  command: {}
    # - "/bin/bash"
    # - "-c"
    # - "./start.sh $(JVM_ARGS)"

  # webservice-server environment variables
  env:
    CLEANSPEAK_MEMORY: "1500M"
    DATABASE_URL: "jdbc:mysql://${CLEANSPEAK_RDS}:3306/cleanspeak?useSSL=false"
    CLEANSPEAK_SEARCH_SERVERS: "https://${CLEANSPEAK_ES}:443"
    DATABASE_ROOT_USER: "administrator"
    DATABASE_USER: "administrator"
    CLEANSPEAK_URL: "https://cs-perf-1.withme.com/cs-webservice/"
    CLEANSPEAK_WEBSERVICE_URLS: "http://cleanspeak-webservice-server:8001/"

  # webservice-server pod resources
  resources:
    requests:
      cpu: "250m"
      memory: "1800Mi"
    limits:
      cpu: "400m"
      memory: "1800Mi"

  # livenessProbe configuration
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - "[ $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8001/status) -eq \"200\" ]"
    initialDelaySeconds: 60
    periodSeconds: 10
    failureThreshold: 10

  # readinessProbe configuration
  readinessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - "[ $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8001/status) -eq \"200\" ]"
    initialDelaySeconds: 60
    periodSeconds: 10
    failureThreshold: 10

  # webservice-server container ports
  containerPorts:
    - containerPort: 8001

  # k8s Service for webservice-server deployment
  service:
    # k8s Service type
    type: NodePort
    # k8s Service ports (If you adding new ports make sure that you set them in "containerPorts" too)
    ports:
      - port: 8001
        targetPort: 8001
        name: http-rest 

######### GLOBAL #########

# K8s ServiceAccount for pod
serviceAccount:
  create: false
  name: ""
  annotations: {}
    # eks.amazonaws.com/role-arn: arn:aws:iam::407733091588:role/-----

# k8s Secret for cleanspeak deployment
secret:
  # If "true" Helm will create k8s Secret and add "secretKeyRef" in deployment.yaml "env"
  create: true
  # Name of k8s Secret (if not set ".Release.Name" will be used)
  name: "cleanspeak"
  # Version of k8s Secret will be added to k8s Secret label "version: $version" 
  version: 1.0.0
  # Set "key: value" for secret.
  secretContents: {}
    # Value and Key can be securely passed as env variable while "helm install" by "--set secret.secretContents.$KEY=$VALUE"
    # LICENSE_ID: "42"
    # DATABASE_PASSWORD: "42"
    # DATABASE_ROOT_PASSWORD: "42"

