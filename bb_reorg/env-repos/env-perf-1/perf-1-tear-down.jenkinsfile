/* groovylint-disable CompileStatic, CouldBeSwitchStatement, DuplicateStringLiteral, GStringExpressionWithinString, LineLength, MethodReturnTypeRequired, NestedBlockDepth, NoDef, ParameterReassignment, SpaceAfterClosingBrace, SpaceBeforeClosingBrace, VariableTypeRequired */

common = load "../lib/common.groovy"


def label = "perf-1-tear-down-${UUID.randomUUID().toString()}"

podTemplate(name: 'perf-1-tear-down', label: label, yaml: """
kind: Pod
metadata:
  name: microservice-orchestration
spec:
  containers:
  - name: microservice-orchestration
    image: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-cicd/microservice-orchestration:1.0.9
    imagePullPolicy: Always
    command:
    - /bin/cat
    tty: true
    env:
    - name: STACK_NAME
      value: "env-perf-1"
    - name: CLUSTER_NAME
      value: "perf-1"
    - name: SUBDOMAIN
      value: "perf-1.withme.com"
"""
  ) {
node(label) {
    try {
      def secrets = [[$class: 'VaultSecret', path: 'cicd/aws_keys', secretValues: [
                      [$class: 'VaultSecretValue', envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
                      [$class: 'VaultSecretValue', envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]],
                    [$class: 'VaultSecret', path: 'cicd/bitbucket', secretValues: [
                      [$class: 'VaultSecretValue', envVar: 'BITBUCKET_USER', vaultKey: 'BITBUCKET_USER'],
                      [$class: 'VaultSecretValue', envVar: 'BITBUCKET_APP_PASSWORD', vaultKey: 'BITBUCKET_APP_PASSWORD']]]]
      wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
  properties([ disableConcurrentBuilds() ])
    stage('Configure tools') {
      common.notifySlack()
      slackSend color: 'good', message: "`${env.JOB_NAME}` #${env.BUILD_NUMBER}\nRunning 'Configure tools' stage."
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        /toolbox/set-aws-credentials.sh --key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY}
        ## Check IAM user and create kubeconfig for kubectl
        aws sts get-caller-identity --output text
        aws eks --region us-west-2 update-kubeconfig --name ${CLUSTER_NAME}
      '''
    }}
    stage('Terminate Route53 records and Ingress Controllers') {
      slackSend color: 'good', message: "`${env.JOB_NAME}` #${env.BUILD_NUMBER}\nRunning 'Terminate Route53 records and Ingress Controllers' stage."
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        ## Clone repo
        git clone https://${BITBUCKET_USER}:${BITBUCKET_APP_PASSWORD}@bitbucket.org/imvu/${STACK_NAME}.git
        ./${STACK_NAME}/update-route53-record-set.sh -n istio-ingressgateway --namespace istio-system -s ${SUBDOMAIN} -a 'DELETE' ||:
        ./${STACK_NAME}/update-route53-record-set.sh -n istio-ingressgateway --namespace istio-system  -s cm-${SUBDOMAIN} -a 'DELETE' ||:
        ./${STACK_NAME}/update-route53-record-set.sh -n istio-ingressgateway --namespace istio-system  -s grafana-${SUBDOMAIN} -a 'DELETE' ||:
        ./${STACK_NAME}/update-route53-record-set.sh -n istio-ingressgateway --namespace istio-system  -s cs-${SUBDOMAIN} -a 'DELETE' ||:
        ### Deleting ELB services before deleting CF stack
        kubectl delete svc istio-ingressgateway -n istio-system ||:
        kubectl delete namespaces istio-system ||:
        echo "+++++Ingress controllers deleted+++++"
      '''
    }}
    stage('Terminate environment') {
     slackSend color: 'good', message: "`${env.JOB_NAME}` #${env.BUILD_NUMBER}\nRunning 'Terminate environment' stage."
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        cd ${STACK_NAME}/aws && sceptre delete us-west-2 -y
        echo "+++++${STACK_NAME} environment deleted+++++"
      '''
    }}}}
    catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
    common.notifySlack(currentBuild.result)
}}}
