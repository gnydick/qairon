AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy EKS to VPC'

Parameters:

  ClusterName:
    Type: String
    Description: Name of k8s cluster will be used for tagging and naming

  ClusterVersion:
    Type: String
    Description: Version of created EKS cluster

  VpcId:
    Type: String
    Description: ID of VPC for EKS

  PublicSubnet01id:
    Type: String
    Description: ID of PublicSubnet for EKS

  PublicSubnet02id:
    Type: String
    Description: ID of PublicSubnet for EKS

  PublicSubnet03id:
    Type: String
    Description: ID of PublicSubnet for EKS

  PrivateSubnet01id:
    Type: String
    Description: ID of PrivateSubnet for EKS

  PrivateSubnet02id:
    Type: String
    Description: ID of PrivateSubnet for EKS

  PrivateSubnet03id:
    Type: String
    Description: ID of PrivateSubnet for EKS

Resources:

  ClusterRoleIAM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-eksServiceRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "eks.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VpcId
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub '${ClusterName}-ControlPlane'

  EKS:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref ClusterVersion
      RoleArn: !GetAtt ClusterRoleIAM.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet01id
          - !Ref PublicSubnet02id
          - !Ref PublicSubnet03id
          - !Ref PrivateSubnet01id
          - !Ref PrivateSubnet02id
          - !Ref PrivateSubnet03id

#-------------------------------------------------------------------#
################################################## Template Outputs #

Outputs:

  ControlPlaneSGid:
    Description: The ID of ControlPlane SecurityGroup
    Value: !Ref ControlPlaneSecurityGroup

  NodeSecurityGroup:
    Description: The ID of Worker SecurityGroup
    Value: !Ref NodeSecurityGroup

  ClusterArn:
    Description: The ARN of EKS Cluster
    Value: !GetAtt EKS.Arn

  ClusterRoleId:
    Description: The logical ID of Cluster IAM role
    Value: !Ref ClusterRoleIAM

  ClusterRoleArn:
    Description: The ARN of Cluster IAM role
    Value: !GetAtt ClusterRoleIAM.Arn
