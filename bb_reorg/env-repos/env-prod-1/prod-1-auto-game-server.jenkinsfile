def notifySlack(String buildStatus = 'STARTED') {

    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'
    def icons
    if (buildStatus == 'STARTED') {
        icons = ':biking:'
    } else if (buildStatus == 'SUCCESS') {
        icons = ':pusheen_dancing:'
    } else if (buildStatus == 'ABORTED') {
        icons = ':thinking_face:'
    } else {
        icons = ':twitching:'
    }
    def color
    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'ABORTED') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }
    def msg = "${buildStatus}${icons}: `${env.JOB_NAME}`\n ${env.BUILD_DISPLAY_NAME}:\nSOURCE=${env.SOURCE}\n<${env.BUILD_URL}console|Watch build console output> @here"
    slackSend(color: color, channel: "#ego-svc-jenkins-ags", message: msg)
}

def autoCancelled = false
def alredyDeployed = false
def label = "prod-1-ags-server-${UUID.randomUUID().toString()}"

podTemplate(name: 'prod-1-ags-server', label: label, yaml: """
kind: Pod
metadata:
  name: microservice-orchestration
spec:
  containers:
  - name: microservice-orchestration
    image: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-cicd/microservice-orchestration:1.0.5
    imagePullPolicy: Always
    command:
    - /bin/cat
    tty: true
    env:
    - name: STACK_NAME
      value: "env-prod-1"
    - name: CLUSTER_NAME
      value: "prod-1"
"""
  ) {
node(label) {
  try {
    def secrets = [[$class: 'VaultSecret', path: 'cicd/prod-1/aws_keys', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
                    [$class: 'VaultSecretValue', envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]],
                  [$class: 'VaultSecret', path: 'cicd/bitbucket', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'BITBUCKET_USER', vaultKey: 'BITBUCKET_USER'],
                    [$class: 'VaultSecretValue', envVar: 'BITBUCKET_APP_PASSWORD', vaultKey: 'BITBUCKET_APP_PASSWORD']]],
                  [$class: 'VaultSecret', path: 'cicd/artifactory', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'ART_TOOL_USER', vaultKey: 'ART_TOOL_USER'],
                    [$class: 'VaultSecretValue', envVar: 'ART_TOOL_PASSWORD', vaultKey: 'ART_TOOL_PASSWORD'],
                    [$class: 'VaultSecretValue', envVar: 'ART_BUILD_USER', vaultKey: 'ART_BUILD_USER'],
                    [$class: 'VaultSecretValue', envVar: 'ART_BUILD_PASSWORD', vaultKey: 'ART_BUILD_PASSWORD']]]]

    withCredentials([string(credentialsId: 'EGO_VAULT_ROLE_ID', variable: 'EGO_VAULT_ROLE_ID'), string(credentialsId: 'EGO_VAULT_SECRET_ID', variable: 'EGO_VAULT_SECRET_ID')]) {
    echo "${EGO_VAULT_ROLE_ID}"

        wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
  properties([
          parameters([string(defaultValue: '', description: 'Latest authoritative-game-server version', name: 'APP_VERSION', trim: true),
                      string(defaultValue: '', description: 'The publisher organization id', name: 'ORG_ID', trim: true),
                      string(defaultValue: '', description: 'The source of this build', name: 'SOURCE', trim: true),
                      // skip “Already deployed version check“ stage if booleanParam is true
                      booleanParam(defaultValue: false, description: 'Force deploy version even if already deployed? ', name: 'FORCE_REDEPLOY')]),
          disableConcurrentBuilds()
      ])
    env.APP_NAME = "authoritative-game-server-${params.ORG_ID}"
    env.POD_NAME = "game-server-${params.ORG_ID}"
    env.APP_VERSION = "${params.APP_VERSION}"
    env.JOB_NAME = "${env.JOB_NAME}"
    env.BUILD_NUMBER = "${env.BUILD_NUMBER}"
    env.SOURCE = "${params.SOURCE}"
    currentBuild.displayName = "#${env.BUILD_NUMBER} `${env.APP_NAME}-${env.APP_VERSION}`"

    stage('Configure aws account and kubectl config') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eox pipefail
        /toolbox/set-aws-credentials.sh --key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY}
        ### Check IAM user
        aws sts get-caller-identity --output text
        ### Configure kubectl
        aws eks --region us-west-2 update-kubeconfig --name ${CLUSTER_NAME}
        ### Check kubectl context
        kubectl config current-context
      '''
    }}
    stage('Already deployed version check') {
      if (params.FORCE_REDEPLOY.toBoolean()) {
        print "Skip check and redeploy"
        } else {
      container('microservice-orchestration')  {
        def versionApp = sh(script:'kubectl -n default get statefulsets.apps ${POD_NAME} -o jsonpath="{..image}" |  cut -f2 -d":"', returnStdout: true).trim()
        print versionApp
        if ( versionApp == env.APP_VERSION ) {
         currentBuild.result = 'SUCCESS'
         alredyDeployed = true
         // throw “error” for stop pipeline immediately
         error('AGS version already deployed')
      }}}}
    stage('Validate AGS version') {
      container('microservice-orchestration')  {
        def validateVersion = sh(script:'aws ecr describe-images --repository-name=ego-server/authoritative-game-server --image-ids=imageTag=${APP_VERSION}', returnStatus: true)
        print validateVersion
        if ( validateVersion != 0 ) {
         autoCancelled = true
         error('AGS version not valid or empty')
      }}}
    stage('Deploy new version of game-server') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        ### Clone repo environment repository ###
        git clone https://${BITBUCKET_USER}:${BITBUCKET_APP_PASSWORD}@bitbucket.org/imvu/${STACK_NAME}.git && cd ${STACK_NAME}
        ### Pull EGO Helm charts from Artifactory Helm repo ###
        helm repo add ego-helm-release https://withme.jfrog.io/withme/ego-helm-release/ --username $ART_BUILD_USER --password $ART_BUILD_PASSWORD && helm repo update

        ### Fetch credentials from Vault ###
        vault_token=$(vault write -address="https://vault.withme.com/" -format=json auth/approle/login role_id=${EGO_VAULT_ROLE_ID} secret_id=${EGO_VAULT_SECRET_ID} | jq .auth.client_token | sed -e 's/^"//' -e 's/"$//')
        vault login -address="https://vault.withme.com/" token=${vault_token} > /dev/null 2>&1
        fetchedSecrets=$(vault kv get -address="https://vault.withme.com/" -format=json cicd/${CLUSTER_NAME}/base64/${APP_NAME} | jq -r '.data | to_entries | .[] | .key + "=" + .value' | sed "s/^/--set-string secret.secretContents./g" | xargs)

        ### Change service tag in AGS helm "values.yaml" file ###
        values_file="${WORKSPACE}/${STACK_NAME}/k8s/game-server-tier/${APP_NAME}-values.yaml"
        sed -i 's/tag: .*/tag: '${APP_VERSION}'/g' ${values_file}

        ### Deploy new version of AGS to the "prod-1" environment ###
        helm upgrade ${POD_NAME} ego-helm-release/authoritative-game-server -f ${values_file} --namespace=default --atomic --wait --timeout 1800s --install ${fetchedSecrets} 
        echo "successfully deployed new AGS: ${APP_NAME}:${APP_VERSION}"
      '''
    }}
    stage('Push deployed version to env-prod-1') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        cd ${STACK_NAME} && git checkout master
        git config --global user.name "jenkins"
        git config --global user.email "jenkins@imvu.com"
        git diff-index --quiet HEAD || git commit -am "Up ${APP_NAME} image version to ${APP_VERSION}. ${JOB_NAME}:#${BUILD_NUMBER}"
        # Added loop in case if developers push changes to "env-prod-1" repo while AGS pipeline running.
        COUNTER=0
        until git push origin master
        do
          if [[ "${COUNTER}" -eq '120' ]]; then
            echo "Can't push to master branch. Something wrong with Bitbucket or with repository"
            exit 1
          else
            sleep 1s
            COUNTER=$(( COUNTER + 1))
            echo "Pull and try again"
            git pull
          fi
        done
      '''
    }}}
    }} catch (e) {
      if ( alredyDeployed ) {
        currentBuild.result = 'SUCCESS'
        // “return” because the build is not failed, just stopped after check
        return
      }
      if ( autoCancelled ) {
        currentBuild.result = 'ABORTED'
        throw e
      } else {
        currentBuild.result = 'FAILURE'
        throw e
      }
    } finally {
      stage('Send notifications') {
        container('microservice-orchestration')  {
        if (currentBuild.result == 'ABORTED') {
          notifySlack(currentBuild.result)
          slackSend color: '#FFFE89', channel: "#ego-svc-jenkins-ags", message: "`${env.JOB_NAME}`\n ${env.BUILD_DISPLAY_NAME}: \n'AGS version not valid or empty. Pipeline aborted!'"
        }
        if (currentBuild.result == 'FAILURE') {
            notifySlack(currentBuild.result)
        }
        if (currentBuild.result != 'FAILURE' && currentBuild.result != 'ABORTED') {
            notifySlack(currentBuild.result)
        }
        if (alredyDeployed) {
            notifySlack(currentBuild.result)
        }}}}
}}
