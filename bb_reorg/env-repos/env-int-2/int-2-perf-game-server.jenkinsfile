common = load "lib/common.groovy"

def autoCancelled = false
def alredyDeployed = false
def label = "int-2-ags-perf-${UUID.randomUUID().toString()}"

podTemplate(name: 'int-2-ags-perf', label: label, yaml: """
kind: Pod
metadata:
  name: microservice-orchestration
spec:
  containers:
  - name: microservice-orchestration
    image: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-cicd/microservice-orchestration:1.0.5
    imagePullPolicy: Always
    command:
    - /bin/cat
    tty: true
    env:
    - name: STACK_NAME
      value: "env-int-2"
    - name: CLUSTER_NAME
      value: "int-2"
"""
  ) {
node(label) {
  try {
    def secrets = [[$class: 'VaultSecret', path: 'cicd/aws_keys', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
                    [$class: 'VaultSecretValue', envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]],
                  [$class: 'VaultSecret', path: 'cicd/bitbucket', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'BITBUCKET_USER', vaultKey: 'BITBUCKET_USER'],
                    [$class: 'VaultSecretValue', envVar: 'BITBUCKET_APP_PASSWORD', vaultKey: 'BITBUCKET_APP_PASSWORD']]],
                  [$class: 'VaultSecret', path: 'cicd/artifactory', secretValues: [
                    [$class: 'VaultSecretValue', envVar: 'ART_TOOL_USER', vaultKey: 'ART_TOOL_USER'],
                    [$class: 'VaultSecretValue', envVar: 'ART_TOOL_PASSWORD', vaultKey: 'ART_TOOL_PASSWORD'],
                    [$class: 'VaultSecretValue', envVar: 'ART_BUILD_USER', vaultKey: 'ART_BUILD_USER'],
                    [$class: 'VaultSecretValue', envVar: 'ART_BUILD_PASSWORD', vaultKey: 'ART_BUILD_PASSWORD']]]]

    withCredentials([string(credentialsId: 'EGO_VAULT_ROLE_ID', variable: 'EGO_VAULT_ROLE_ID'), string(credentialsId: 'EGO_VAULT_SECRET_ID', variable: 'EGO_VAULT_SECRET_ID')]) {
    echo "${EGO_VAULT_ROLE_ID}"

        wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {
  properties([
          parameters([choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7'], description: 'Quantity of AGS "withmeperf" replicas', name: 'REPLICAS')]),
          disableConcurrentBuilds()
      ])
    env.APP_NAME = "authoritative-game-server-withmeperf"
    env.POD_NAME = "game-server-withmeperf"
    env.REPLICAS = "${params.REPLICAS}"
    env.JOB_NAME = "${env.JOB_NAME}"
    env.BUILD_NUMBER = "${env.BUILD_NUMBER}"
    currentBuild.displayName = "#${env.BUILD_NUMBER} `${env.APP_NAME}`"

    stage('Configure aws account and kubectl config') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eox pipefail
        /toolbox/set-aws-credentials.sh --key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY}
        ### Check IAM user
        aws sts get-caller-identity --output text
        ### Configure kubectl
        aws eks --region us-west-2 update-kubeconfig --name ${CLUSTER_NAME}
        ### Check kubectl context
        kubectl config current-context
      '''
    }}
    stage('Deploy new version of game-server') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        ### Clone repo environment repository ###
        git clone https://${BITBUCKET_USER}:${BITBUCKET_APP_PASSWORD}@bitbucket.org/imvu/${STACK_NAME}.git && cd ${STACK_NAME}
        ### Pull EGO Helm charts from Artifactory Helm repo ###
        helm repo add ego-helm-release https://withme.jfrog.io/withme/ego-helm-release/ --username $ART_BUILD_USER --password $ART_BUILD_PASSWORD && helm repo update

        ### Fetch credentials from Vault ###
        vault_token=$(vault write -address="https://vault.withme.com/" -format=json auth/approle/login role_id=${EGO_VAULT_ROLE_ID} secret_id=${EGO_VAULT_SECRET_ID} | jq .auth.client_token | sed -e 's/^"//' -e 's/"$//')
        vault login -address="https://vault.withme.com/" token=${vault_token} > /dev/null 2>&1
        fetchedSecrets=$(vault kv get -address="https://vault.withme.com/" -format=json cicd/${CLUSTER_NAME}/base64/${APP_NAME} | jq -r '.data | to_entries | .[] | .key + "=" + .value' | sed "s/^/--set-string secret.secretContents./g" | xargs)

        ### Change replicas in AGS helm "values.yaml" file ###
        values_file="${WORKSPACE}/${STACK_NAME}/k8s/game-server-tier/${APP_NAME}-values.yaml"
        sed -i 's/replicas: .*/replicas: '${REPLICAS}'/g' ${values_file}

        ### Deploy new quantity of "withmeperf" AGS to the "int-2" environment ###
        helm upgrade ${POD_NAME} ego-helm-release/authoritative-game-server -f ${values_file} --namespace=default --atomic --wait --timeout 1800s --install ${fetchedSecrets} 
        echo "++++Successfully deployed new AGS replicas quantity++++"

        # Print the AWS node type
        echo "Node type(s):"
        kubectl get pods -n default --selector app=game-server-withmeperf -o jsonpath="{.items[*].spec.nodeName}" | tr ' ' '\n' | uniq | xargs -n1 kubectl get nodes -o jsonpath="{.metadata.name} -> {.metadata.labels.beta\\.kubernetes\\.io/instance-type}{'\\n'}" ||:
        # Print the debug information
        kubectl describe pods -n default --selector app=game-server-withmeperf | grep -E "(^Name:|Node:|Image:)" | sed -e 's/^[[:space:]]*//' | sed -e $'s/^Name/\\\nName/' ||:
      '''
    }}
    stage('Push tested version to env-int-2') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eo pipefail
        cd ${STACK_NAME} && git checkout master
        git config --global user.name "jenkins"
        git config --global user.email "jenkins@imvu.com"
        git diff-index --quiet HEAD || git commit -am "Changed ${APP_NAME} replicas quantity to ${REPLICAS}. ${JOB_NAME}:#${BUILD_NUMBER}"
        # Added loop in case if developers push changes to "env-int-2" repo while AGS pipeline running.
        COUNTER=0
        until git push origin master
        do
          if [[ "${COUNTER}" -eq '120' ]]; then
            echo "Can't push to master branch. Something wrong with Bitbucket or with repository"
            exit 1
          else
            sleep 1s
            COUNTER=$(( COUNTER + 1))
            echo "Pull and try again"
            git pull
          fi
        done
      '''
    }}}
    }} catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
      } finally {
      stage('Send notifications') {
        container('microservice-orchestration')  {
        if (currentBuild.result == 'FAILURE') {
            common.notifySlack(currentBuild.result)
        }
        if (currentBuild.result != 'FAILURE') {
            common.notifySlack(currentBuild.result)
        }}}}
}}