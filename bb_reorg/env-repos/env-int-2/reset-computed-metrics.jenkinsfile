def label = "int-2-automation-${UUID.randomUUID().toString()}"

podTemplate(name: 'int-2-automation', label: label, yaml: """
kind: Pod
metadata:
  name: microservice-orchestration
spec:
  containers:
  - name: microservice-orchestration
    image: 407733091588.dkr.ecr.us-west-2.amazonaws.com/ego-cicd/microservice-orchestration:1.0.17
    imagePullPolicy: Always
    command:
    - /bin/cat
    tty: true
    env:
    - name: STACK_NAME
      value: "env-int-2"
    - name: CLUSTER_NAME
      value: "int-2"
"""
  ) {
node(label) {
  try {
    def secrets = [[$class: 'VaultSecret', path: 'cicd/aws_keys', secretValues: [
        [$class: 'VaultSecretValue', envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'],
        [$class: 'VaultSecretValue', envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']
    ]]]
    wrap([$class: 'VaultBuildWrapper', vaultSecrets: secrets]) {

    properties([
        parameters([
            string(name: 'USERNAME', trim: true),
            string(name: 'METRICS', description: 'Metrics with a SPACE as delimiter. Example: SUM#withme_xp=7 MAX#withme_level=1', trim: true)
        ]),
        disableConcurrentBuilds()
    ])
    env.USERNAME = "${params.USERNAME}"
    env.METRICS = "${params.METRICS}"
    env.JOB_NAME = "${env.JOB_NAME}"
    env.BUILD_NUMBER = "${env.BUILD_NUMBER}"
    currentBuild.displayName = "#${env.BUILD_NUMBER} reset metrics: ${env.USERNAME}"

    stage('Configure aws account and kubectl config') {
      container('microservice-orchestration')  {
      sh '''#!/usr/bin/env bash
        set -eox pipefail
        /toolbox/set-aws-credentials.sh --key-id ${AWS_ACCESS_KEY_ID} --secret-access-key ${AWS_SECRET_ACCESS_KEY}
        ### Check IAM user
        aws sts get-caller-identity --output text
        ### Configure kubectl
        aws eks --region us-west-2 update-kubeconfig --name ${CLUSTER_NAME}
        ### Check kubegame-server-prep-for-review.jenkinsfilectl context
        kubectl config current-context
      '''
      }
    }

    stage('Reset computed metrics') {
      container('microservice-orchestration')  {
        sh '''#!/usr/bin/env bash
          set -eo pipefail

          python3 /toolbox/automation-scripts/reset-computed-metrics.py $USERNAME $METRICS --yes
        '''
      }
    }

    }} catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    }
  }
}
