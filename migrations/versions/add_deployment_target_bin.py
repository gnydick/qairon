"""empty message

Revision ID: add_deployment_target_bin
Revises: b7c56b16a417
Create Date: 2022-08-16 11:26:34.365049

this migration will require regenerating the cascading ids across the database, this cannot be done via alembic alone,
must use the scripts/

"""

# revision identifiers, used by Alembic.
revision = 'add_deployment_target_bin'
down_revision = 'b7c56b16a417'

from alembic import op
import sqlalchemy as sa

from alembic import context


def upgrade():
    upgrades_pre()
    schema_upgrades()
    upgrades_post()


def downgrade():
    downgrades_pre()
    schema_downgrades()
    downgrades_post()


def upgrades_pre():
    pass


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('deployment_target_bin',
                    sa.Column('id', sa.String(), nullable=False),
                    sa.Column('name', sa.String(), nullable=False, server_default='bin0'),
                    sa.Column('deployment_target_id', sa.String(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.Column('last_updated_at', sa.DateTime(), nullable=True),
                    sa.Column('defaults', sa.Text(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.add_column('deployment', sa.Column('deployment_target_bin_id', sa.String(), nullable=True))


    op.execute(
        "insert into deployment_target_bin (id, deployment_target_id, name)" \
        " select concat(dt.id, ':', 'bin0'), dt.id, 'bin0' as db_name from deployment_target dt;"
    )
    op.execute('update deployment as d' \
               ' set deployment_target_bin_id=b.db_id' \
               ' from (select db.id as db_id,' \
               ' dt.id as dt_id' \
               ' from deployment_target_bin db,' \
               ' deployment_target dt' \
               ' where db.deployment_target_id = dt.id) as b' \
               ' where d.deployment_target_id = b.dt_id;'
               )


def upgrades_post():
    op.create_foreign_key('deployment_deployment_target_bin_id_fkey', 'deployment', 'deployment_target_bin', ['deployment_target_bin_id'],
                          ['id'])
    op.create_foreign_key('deployment_target_bin_deployment_target_id_fkey', 'deployment_target_bin', 'deployment_target',
                          ['deployment_target_id'],
                          ['id'])
    op.drop_constraint('deployment_deployment_target_id_fkey', 'deployment', type_='foreignkey')
    op.drop_column('deployment', 'deployment_target_id')


def downgrades_pre():
    op.add_column('deployment', sa.Column('deployment_target_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key('deployment_deployment_target_id_fkey', 'deployment', 'deployment_target',
                          ['deployment_target_id'], ['id'])


def schema_downgrades():
    op.execute('update deployment as d' \
               ' set deployment_target_id=b.dt_id' \
               ' from (select db.deployment_target_id as dt_id, ' \
               ' db.id as db_id' \
               ' from deployment_target_bin db,' \
               ' deployment d,' \
               ' deployment_target dt' \
               ' where db.deployment_target_id = dt.id) as b' \
               ' where d.deployment_target_bin_id = b.db_id;')


def downgrades_post():
    op.drop_constraint('deployment_deployment_target_bin_id_fkey', 'deployment', type_='foreignkey')
    op.drop_column('deployment', 'deployment_target_bin_id')
    op.drop_table('deployment_target_bin')
